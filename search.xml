<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何在hexo中安装next主题</title>
    <url>/2024/01/12/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h1><p>npm install -g hexo-cli</p>
<h1 id="2-主题下载安装"><a href="#2-主题下载安装" class="headerlink" title="2. 主题下载安装"></a>2. 主题下载安装</h1><p>进入命令行，下载 NexT 主题，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>修改站点配置文件<code>_config.yml</code>，找到如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure>

<p>将 landscape 修改为 next 即可。</p>
<span id="more"></span>





<h1 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h1><p>在 Hexo 中有<strong>两份</strong>主要的配置文件，其名称都是 <strong>_config.yml</strong>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的站点配置；另一份位于<strong>主题目录</strong>下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">/hexo/_config.yml</span></span><br><span class="line"><span class="string">/hexo/themes/next/_config.yml</span></span><br></pre></td></tr></table></figure>

<h1 id="4-修改语言"><a href="#4-修改语言" class="headerlink" title="4. 修改语言"></a>4. 修改语言</h1><p>打开站点配置文件，搜索 language，找到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">author: waterdance</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h1 id="5-新建标签及分类界面"><a href="#5-新建标签及分类界面" class="headerlink" title="5. 新建标签及分类界面"></a>5. 新建标签及分类界面</h1><p>打开 <strong>主题配置文件</strong>，搜索 menu，找到如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<p>把 tags 和 categories 前面的 # 删除</p>
<h1 id="6-切换主题"><a href="#6-切换主题" class="headerlink" title="6. 切换主题"></a>6. 切换主题</h1><p>在主题配置文件<code>/next/_config.yml</code>中查找：<code>scheme</code>，找到如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"><span class="string">选择你喜欢的一种样式，去掉前面的</span> <span class="comment">#，其他主题前加上 # 即可。</span></span><br></pre></td></tr></table></figure>

<h1 id="7-隐藏网页底部-powered-By-Hexo-强力驱动"><a href="#7-隐藏网页底部-powered-By-Hexo-强力驱动" class="headerlink" title="7. 隐藏网页底部 powered By Hexo &#x2F; 强力驱动"></a>7. 隐藏网页底部 powered By Hexo &#x2F; 强力驱动</h1><p>打开 themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig</p>
<p>找到：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.footer.powered.enable</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">&lt;div</span> <span class="string">class=&quot;powered-by&quot;&gt;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#x27; + nofollow + &#x27; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&#x27;) &#125;&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&#x27;version&#x27;) &#125;&#125;&#123;% endif %&#125;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&lt;/div&gt;</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.footer.powered.enable</span> <span class="string">and</span> <span class="string">theme.footer.theme.enable</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">&lt;span</span> <span class="string">class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.footer.theme.enable</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">&lt;div</span> <span class="string">class=&quot;theme-info&quot;&gt;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&#123;&#123; __(&#x27;footer.theme&#x27;) &#125;&#125; – &#123;#</span></span><br><span class="line"><span class="comment">#&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#123;&#123; nofollow &#125;&#125; href=&quot;https://theme-next.org&quot;&gt;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;#</span></span><br><span class="line"><span class="comment">#&#125;&lt;/div&gt;</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure>

<p>把这段代码首尾分别加上：<code>&lt;!--</code> 和<code>--&gt;</code>，或者直接删除。</p>
<h1 id="8-文章加上阴影"><a href="#8-文章加上阴影" class="headerlink" title="8. 文章加上阴影"></a>8. 文章加上阴影</h1><p>打开 &#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl，添加：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">-webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">-moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-浏览页面显示当前浏览进度"><a href="#9-浏览页面显示当前浏览进度" class="headerlink" title="9. 浏览页面显示当前浏览进度"></a>9. 浏览页面显示当前浏览进度</h1><p>打开 themes&#x2F;next&#x2F;_config.yml，搜索关键字 <code>scrollpercent</code>，把 false 改为 true。</p>
<p><img src="/2024/01/12/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/image-20240115193347448.png" alt="image-20240115193347448"></p>
<h1 id="10-Local-Search本地搜索"><a href="#10-Local-Search本地搜索" class="headerlink" title="10. Local Search本地搜索"></a>10. Local Search本地搜索</h1><p>安装插件<code>hexo-generator-searchdb</code>,执行以下命令:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>修改<code>hexo/_config.yml</code>站点配置文件，新增以下内容到任意位置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h1 id="11-设置网站图标"><a href="#11-设置网站图标" class="headerlink" title="11. 设置网站图标"></a>11. 设置网站图标</h1><p>在 EasyIcon 中找一张（32 * 32）的 ico 图标，或者去别的网站下载或者制作，并将图标名称改为 favicon.ico，然后把图标放在 &#x2F;themes&#x2F;next&#x2F;source&#x2F;images 里，并且修改主题配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">Put</span> <span class="string">your</span> <span class="string">favicon.ico</span> <span class="string">into</span> <span class="string">`hexo-site/source/`</span> <span class="string">directory.</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure>

<h1 id="12-修改文章底部的-号的标签，改为图标"><a href="#12-修改文章底部的-号的标签，改为图标" class="headerlink" title="12. 修改文章底部的#号的标签，改为图标"></a>12. 修改文章底部的#号的标签，改为图标</h1><p>修改模板<code>/themes/next/layout/_macro/post.swig</code></p>
<p>搜索 rel&#x3D;“tag”&gt;#，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<h1 id="13-文章分享功能"><a href="#13-文章分享功能" class="headerlink" title="13. 文章分享功能"></a>13. 文章分享功能</h1><p>打开<code>themes/next/_config.yml</code> 搜索关键字<code>needmoreshare2</code> 修改为下面设置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postbottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="comment">#位置</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">bottomCenter</span></span><br><span class="line">      <span class="comment">#可分享网站</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line">  <span class="attr">float:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">vertical</span></span><br><span class="line">      <span class="comment">#位置</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">topRight</span></span><br><span class="line">       <span class="comment">#可分享网站</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br></pre></td></tr></table></figure>

<h1 id="14-文章加密访问"><a href="#14-文章加密访问" class="headerlink" title="14. 文章加密访问"></a>14. 文章加密访问</h1><p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,插入这样一段代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    if(&#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">        if (prompt(&#x27;请输入文章密码&#x27;) !== &#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">            alert(&#x27;密码错误！&#x27;);</span><br><span class="line">            history.back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h1 id="15-增加文章字数统计及阅读时常功能"><a href="#15-增加文章字数统计及阅读时常功能" class="headerlink" title="15. 增加文章字数统计及阅读时常功能"></a>15. 增加文章字数统计及阅读时常功能</h1><p>安装插件<code>hexo-wordcount</code>,执行以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>

<p>修改<code>themes/next/_config.yml</code>主题配置文件，搜索关键字<code>post_wordcount</code>,修改如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true #单篇文章字数</span><br><span class="line">  min2read: true #单篇阅读时长</span><br><span class="line">  totalcount: true #站点总字数</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure>

<h1 id="16-文章置顶功能"><a href="#16-文章置顶功能" class="headerlink" title="16. 文章置顶功能"></a>16. 文章置顶功能</h1><p>移除默认安装的插件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br></pre></td></tr></table></figure>

<p>安装新插件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top: true</span><br></pre></td></tr></table></figure>

<p>如果你置顶了多篇，怎么控制顺序呢？设置top的值（大的在前面），比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Post a.md</span><br><span class="line">title: a</span><br><span class="line">top: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Post b.md</span><br><span class="line">title: b</span><br><span class="line">top: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>文章 b 便会显示在文章 a 的前面</p>
<p>设置置顶图标<br>打开&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig文件，在<code>&lt;div class=&quot;post-meta&quot;&gt;</code>下方，插入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/12/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/image-20240115194810928.png" alt="image-20240115194810928"></p>
<h1 id="17-修改【Read-More】按钮样式"><a href="#17-修改【Read-More】按钮样式" class="headerlink" title="17. 修改【Read More】按钮样式"></a>17. 修改【Read More】按钮样式</h1><p>修改<code>themes\next\source\css\_custom\custom.styl</code>文件，加入自定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-attr">[Read More]</span>按钮样式</span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.35</span>);</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: unset;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.35</span>);</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#a166ab</span> <span class="number">0%</span>, <span class="number">#ef4e7b</span> <span class="number">25%</span>, <span class="number">#f37055</span> <span class="number">50%</span>, <span class="number">#ef4e7b</span> <span class="number">75%</span>, <span class="number">#a166ab</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果图</strong></p>
<p><img src="/2024/01/12/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%AD%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/image-20240116143513555.png" alt="image-20240116143513555"></p>
<p><strong>修改阅读全文前显示文字数量即位置</strong></p>
<p>打开 <code>themes/next/_config.yml</code>，搜索关键字 <code>auto_excerpt</code>， 修改length即可修改阅读全文前显示文字数量</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>



<h1 id="18-修改链接文字样式"><a href="#18-修改链接文字样式" class="headerlink" title="18. 修改链接文字样式"></a>18. 修改链接文字样式</h1><p>打开<code>themes\next\source\css\_common\components\post\post.styl</code>添加以下代码:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> a&#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line"> <span class="attribute">border-bottom</span>: none;</span><br><span class="line"> <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#ff106c</span>;</span><br><span class="line">   <span class="attribute">text-decoration</span>: underline;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="19-头像设置图形，停留旋转效果"><a href="#19-头像设置图形，停留旋转效果" class="headerlink" title="19. 头像设置图形，停留旋转效果"></a>19. 头像设置图形，停留旋转效果</h1><p>修改<code>themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>,新增以下代码:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$site</span>-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">$site</span>-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$site</span>-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$site</span>-author-image-border-width solid <span class="variable">$site</span>-author-image-border-color;</span><br><span class="line">  <span class="comment">//设置圆形</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">2s</span> all;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//旋转</span></span><br><span class="line"><span class="selector-class">.site-author-image</span>:hover&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="20-文章添加阴影效果-文章边框"><a href="#20-文章添加阴影效果-文章边框" class="headerlink" title="20.文章添加阴影效果(文章边框)"></a>20.文章添加阴影效果(文章边框)</h1><p>打开<code>themes/next/source/css/_custom/custom.styl</code>文件添加:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h1 id="21-近期文章"><a href="#21-近期文章" class="headerlink" title="21. 近期文章"></a>21. 近期文章</h1><p>修改<code>themes/next/layout/_macro/sidebar.swig</code> 。找到<code>theme.social</code>板块代码，在该板块最后的endif后隔一行添加如下代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# recent posts #&#125;</span><br><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">  &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout  &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;links-of-blogroll-title&quot;&gt;</span><br><span class="line">      &lt;!-- modify icon to fire by szw --&gt;</span><br><span class="line">      &lt;i class=&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class="line">      &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125;</span><br><span class="line">      &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span><br><span class="line">        &lt;li class=&quot;recent_posts_li&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>编辑<code>themes/next/source/css/_common/components/sidebar/sidebar-0blogroll.styl</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.recent_posts_li</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: cengter;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>themes/next/_config.yml</code>中添加下方代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 近期文章设置</span></span><br><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="22-文章末尾添加“文本结束”标记"><a href="#22-文章末尾添加“文本结束”标记" class="headerlink" title="22. 文章末尾添加“文本结束”标记"></a>22. 文章末尾添加“文本结束”标记</h1><p>修改在themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig中，在wechat-subscriber.swig之前添加如下代码：</p>
<p>—————- The End —————-</p>




<h1 id="23-代码块复制选项"><a href="#23-代码块复制选项" class="headerlink" title="23. 代码块复制选项"></a>23. 代码块复制选项</h1><p>Next6 中自带了复制代码按钮，Next5 需要自己手动配置。</p>
<p>搜索 codeblock，找到如下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line"><span class="attr">border_radius:</span> <span class="number">8</span>   <span class="comment"># 按钮圆滑度</span></span><br><span class="line"><span class="attr">copy_button:</span>  <span class="comment"># 设置是否开启代码块复制按钮</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">	<span class="attr">show_result:</span> <span class="literal">true</span>  <span class="comment"># 是否显示复制成功信息</span></span><br></pre></td></tr></table></figure>





<h1 id="24-修改加载特效"><a href="#24-修改加载特效" class="headerlink" title="24. 修改加载特效"></a>24. 修改加载特效</h1><p>由于网页不可能一直都秒进，总会等待一段时间的，所以可以设置顶部加载条。Next 已经集成了很多加载特效，可以在下面选项中在线调试测试一下。</p>
<p>搜索<code>pace</code>，找到如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 页面顶部加载条</span></span><br><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment">#pace-theme-big-counter</span></span><br><span class="line"><span class="comment">#pace-theme-bounce</span></span><br><span class="line"><span class="comment">#pace-theme-barber-shop</span></span><br><span class="line"><span class="comment">#pace-theme-center-atom</span></span><br><span class="line"><span class="comment">#pace-theme-center-circle</span></span><br><span class="line"><span class="comment">#pace-theme-center-radar</span></span><br><span class="line"><span class="comment">#pace-theme-center-simple</span></span><br><span class="line"><span class="comment">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment">#pace-theme-fill-left</span></span><br><span class="line"><span class="comment">#pace-theme-flash</span></span><br><span class="line"><span class="comment">#pace-theme-loading-bar</span></span><br><span class="line"><span class="comment">#pace-theme-mac-osx</span></span><br><span class="line"><span class="comment">#pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-minimal</span>  <span class="comment">#默认设置，可以修改为上述任何一个</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>javaweb-day04-mybatis</title>
    <url>/2024/02/08/javaweb-day04-mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis基础操作"><a href="#Mybatis基础操作" class="headerlink" title="Mybatis基础操作"></a>Mybatis基础操作</h1><ul>
<li><p>配置日志文件的输出位置</p>
<ul>
<li><p>编辑application.properties文件内容将其输入至控制台</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line"># 配置mybatis的日志信息，指定输出至控制台</span><br><span class="line">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次运行之后得到预编译SQL操作信息（在运行前，后将Parameter写入Preparing中的参数）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: delete from emp where id = ?</span><br><span class="line">==&gt; Parameters: 16(Integer)</span><br><span class="line">&lt;==    Updates: 0</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>预编译SQL的优势</strong></p>
<ul>
<li><p>性能更高</p>
</li>
<li><p>更安全（防止SQL注入）</p>
</li>
<li><p>普通的java语句-&gt;sql语法解析检查-&gt;优化SQL-&gt;编译sql-&gt;执行sql</p>
<p>其中，预编译会将“sql语法解析检查-&gt;优化SQL-&gt;编译sql”这几步<strong>缓存</strong>起来，后续如果有大量的SQL语句，则从<strong>缓存</strong>中找是否有对应的预编译好的指令，如果有，就省略这三步操作，直接去执行SQL语句，否则，需要再次执行操作。</p>
<p><strong>新能更高的具体例子：</strong></p>
<p>例如，如果我们要执行以下三条语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>则这三条语句都要进行语法检查，优化，编译。</p>
<p>如果我们实际执行的是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure>

<p>则对应的后两条删除语句可以直接将参数带入，直接执行SQL语句。</p>
<p><strong>防止SQL注入的具体例子：</strong></p>
<ul>
<li><strong>SQL注入</strong>是通过操作输入的数据来修改实现定义好的SQL语句，以达到执行代码对服务器进行<strong>攻击</strong>的方法。</li>
<li>例如 用户输入的是’waterdance’，password输入的是 ‘ or  ‘1’ &#x3D; ‘1</li>
</ul>
</li>
<li><p>参数占位符类别</p>
<table>
<thead>
<tr>
<th>#{…}</th>
<th>${…}</th>
</tr>
</thead>
<tbody><tr>
<td>执行SQL语句时，会将#{…}替换为？，生成预编译的SQL，会自动设置参数值</td>
<td>拼接SQL。直接将 参数拼接在SQL语句中，存在SQL注入问题。</td>
</tr>
<tr>
<td>使用时机：参数传递，都使用#{}</td>
<td>使用时机：如果对表名、列表进行动态设置时使用。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</li>
<li><p>准备</p>
<ul>
<li><p>准备数据库表emp</p>
</li>
<li><p>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis framework，mysql driver，lombok）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        mybatis起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        lambok依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        springboot做单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application.properties中引入数据库连接信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建对应的实体类Emp(实体类属性采用驼峰命名)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Short job;</span><br><span class="line">    <span class="keyword">private</span> LocalDate entrydate;</span><br><span class="line">    <span class="keyword">private</span> Integer deptId;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备Mapper接口EmpMapper(程序会自动创建该接口的代理对象，并且会将该代理对象放到IOC容器中)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">empMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>删除（在Mapper中编写删除语句和函数）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据ID删除数据</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;  <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在IDEA中测试编写方法是否正确（在test&#x2F;java&#x2F;类名Tests.java中编写代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootmybatiscrud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mapper.EmpMapper;</span><br><span class="line"><span class="comment">//import com.example.mapper.EmpMapper;</span></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com/example/mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123; <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> empMapper.delete(<span class="number">16</span>);</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增（在Mapper中编写删除语句和函数）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据ID删除数据</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;  <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增员工</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span></span><br><span class="line"><span class="meta">        &quot; values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（在IDEA中测试编写方法是否正确（在test&#x2F;java&#x2F;类名Tests.java中编写代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootmybatiscrud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mapper.EmpMapper;</span><br><span class="line"><span class="comment">//import com.example.mapper.EmpMapper;</span></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com/example/mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123; <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line">        empMapper.delete(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;杰瑞&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>主键返回</strong></p>
<p>描述：在数据添加成功后，需要获取插入数据库数据的主键。</p>
<p>如：添加套餐数据时，还需要维护套餐菜品关系表数据。</p>
<p>实现方法，在EmpMapper类中对应方法添加新的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Options;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据ID删除数据</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;  <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增员工</span></span><br><span class="line">    <span class="meta">@Options(keyProperty = &quot;id&quot;, useGeneratedKeys = true)</span>  <span class="comment">// 获取返回的主键，指定id，说明返回的数据封装到emp.id中</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span></span><br><span class="line"><span class="meta">        &quot; values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootmybatiscrud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mapper.EmpMapper;</span><br><span class="line"><span class="comment">//import com.example.mapper.EmpMapper;</span></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com/example/mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123; <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line">        empMapper.delete(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Jerry3&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;杰瑞3&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line">        System.out.println(emp.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新</p>
<p>在EmpMapper中编辑更新函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据ID删除数据</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;  <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增员工</span></span><br><span class="line">    <span class="meta">@Options(keyProperty = &quot;id&quot;, useGeneratedKeys = true)</span>  <span class="comment">// 获取返回的主键，指定id，说明返回的数据封装到emp.id中</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span></span><br><span class="line"><span class="meta">        &quot; values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新员工</span></span><br><span class="line">    <span class="meta">@Update(&quot;update emp set username = #&#123;username&#125;, name = #&#123;name&#125;, gender = #&#123;gender&#125;, image = #&#123;image&#125;, job = #&#123;job&#125;, entrydate = #&#123;entrydate&#125;,dept_id = #&#123;deptId&#125;, update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试代码中编写测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootmybatiscrud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mapper.EmpMapper;</span><br><span class="line"><span class="comment">//import com.example.mapper.EmpMapper;</span></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com/example/mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123; <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line">        empMapper.delete(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Jerry3&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;杰瑞3&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line">        System.out.println(emp.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setId(<span class="number">18</span>);</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Tom1&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;汤姆1&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">2</span>);</span><br><span class="line">        emp.setJob((<span class="type">short</span>)<span class="number">3</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询（根据ID查询）</p>
<p>在EmpMapper中编辑查询函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据ID删除数据</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;  <span class="comment">//代表此次删除影响的记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增员工</span></span><br><span class="line">    <span class="meta">@Options(keyProperty = &quot;id&quot;, useGeneratedKeys = true)</span>  <span class="comment">// 获取返回的主键，指定id，说明返回的数据封装到emp.id中</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span></span><br><span class="line"><span class="meta">        &quot; values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新员工</span></span><br><span class="line">    <span class="meta">@Update(&quot;update emp set username = #&#123;username&#125;, name = #&#123;name&#125;, gender = #&#123;gender&#125;, image = #&#123;image&#125;, job = #&#123;job&#125;, entrydate = #&#123;entrydate&#125;,dept_id = #&#123;deptId&#125;, update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据ID查询员工</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在test中编辑测试样例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.springbootmybatiscrud;</span><br><span class="line"></span><br><span class="line">import com.example.mapper.EmpMapper;</span><br><span class="line">//import com.example.mapper.EmpMapper;</span><br><span class="line">import com.example.pojo.Emp;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import java.time.LocalDate;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@MapperScan(&quot;com/example/mapper&quot;)</span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringbootMybatisCrudApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testDelete()&#123; //代表此次删除影响的记录数</span><br><span class="line">        empMapper.delete(16);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testInsert()&#123;</span><br><span class="line">        Emp emp = new Emp();</span><br><span class="line">        emp.setUsername(&quot;Jerry3&quot;);</span><br><span class="line">        emp.setName(&quot;杰瑞3&quot;);</span><br><span class="line">        emp.setImage(&quot;1.jpg&quot;);</span><br><span class="line">        emp.setGender((short)1);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(2000,1,1));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(1);</span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line">        System.out.println(emp.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testUpdate()&#123;</span><br><span class="line">        Emp emp = new Emp();</span><br><span class="line">        emp.setId(18);</span><br><span class="line">        emp.setUsername(&quot;Tom1&quot;);</span><br><span class="line">        emp.setName(&quot;汤姆1&quot;);</span><br><span class="line">        emp.setImage(&quot;1.jpg&quot;);</span><br><span class="line">        emp.setGender((short)2);</span><br><span class="line">        emp.setJob((short)3);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(2000,1,1));</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(1);</span><br><span class="line"></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGetById()&#123;</span><br><span class="line">        Emp emp = empMapper.getById(20);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>数据封装</p>
<ul>
<li><p>实体类属性名和数据库查询返回的字段名一致，mybatis会自动封装。</p>
</li>
<li><p>如果实体类属性名和数据库表查询返回的字段名不一样，不能自动封装。</p>
</li>
<li><p>为了解决实体类与数据库表命名不一致的问题，我们有以下方案。</p>
<ul>
<li><p>方案一：给字段起别名，让别名与实体类属性一致（修改empmapper类中的select方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询员工</span></span><br><span class="line">   <span class="meta">@Select(&quot;select id, username, password, name, gender, image, job,  entrydate, &quot; +</span></span><br><span class="line"><span class="meta">       &quot; dept_id deptId, create_time createTime, update_time updateTime from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方案二：通过MyBatis,@Result注释手动映射封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;dept_id&quot;,property = &quot;deptId&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;update_time&quot;,property = &quot;updateTime&quot;),</span></span><br><span class="line"><span class="meta">        @Result(column = &quot;create_time&quot;,property = &quot;createTime&quot;)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>（推荐使用）方案三</strong>：开启mybatis的驼峰命名自动映射开关（将a_column这样的数据表字段自动映射到实体类的属性aColumn中,要严格遵循数据表字段是下划线分割，类中的属性名是驼峰命名）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line"># 配置mybatis的日志，指定其输出到控制台</span><br><span class="line">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line"></span><br><span class="line"># 开启mybatis的驼峰命名自动映射开关</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>条件查询</p>
<ul>
<li><p>在empMapper类中编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件查询员工</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where name like &#x27;%$&#123;name&#125;%&#x27; and gender = #&#123;gender&#125; and &quot; +</span></span><br><span class="line"><span class="meta">        &quot;entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc ;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在test类中测试接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Emp&gt; empList = empMapper.list(<span class="string">&quot;张&quot;</span>, (<span class="type">short</span>) <span class="number">1</span>, LocalDate.of(<span class="number">2010</span>, <span class="number">1</span>, <span class="number">1</span>), LocalDate.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    System.out.println(empList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为name使用的是${}而不是#{}，可能存在SQL注入问题。解决办法：empMapper类中编写的接口使用mysql的concat函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件查询员工</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender = #&#123;gender&#125; and &quot; +</span></span><br><span class="line"><span class="meta">        &quot;entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc ;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h2><p>之前的方式是通过注解的方式配置sql语句，这是通过xml来配置sql语句。</p>
<ul>
<li><strong>实际开发时，选择注解来映射简单语句，如果需要实现复杂的SQL功能，还是要通过xml来完成。</strong></li>
</ul>
<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul>
<li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在<strong>相同包</strong>下(同包同名)。</li>
<li>XML映射文件的namespace属性与Mapper接口<strong>全限定名</strong>一致。resultType属性要填写的单条记录要封装的类型的<strong>全限定名</strong>。</li>
<li>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</li>
</ul>
<p>例子：</p>
<p>在resources目录下创建与EmpMapper想通包的文件EmpMapper.xml，其中的配置如下所示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender = #&#123;gender&#125; and  +</span><br><span class="line">                                entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装mybatisX插件，mapper类会和对应的xml建立连接。</li>
</ul>
<h2 id="MyBatis动态SQL"><a href="#MyBatis动态SQL" class="headerlink" title="MyBatis动态SQL"></a>MyBatis动态SQL</h2><p><strong>动态SQL</strong></p>
<p>随着用户的输入或外部条件的变化而变化的SQL语句，我们称为动态SQL。</p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
  </entry>
  <entry>
    <title>javaweb-day03-mysql</title>
    <url>/2024/02/06/javaweb-day03-mysql/</url>
    <content><![CDATA[<p>什么是数据库？</p>
<ul>
<li><p>数据库：DataBase（DB），是存储和管理数据的仓库。</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206125606781.png" alt="image-20240206125606781"></p>
</li>
<li><p>数据库管理系统：DataBase Management System(DBMS)，操纵和管理数据库的大型软件。</p>
</li>
<li><p>SQL：Structured Query Language，操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准。</p>
</li>
</ul>
<p>数据库产品</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206130010075.png" alt="image-20240206130010075"></p>
<h1 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h1><h2 id="安装、配置"><a href="#安装、配置" class="headerlink" title="安装、配置"></a>安装、配置</h2><h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p>点开下面的链接：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20221020012302873.png" alt="image-20221020012302873"> </p>
<p>点击Download 就可以下载对应的安装包了, 安装包如下: <img src="/2024/02/06/javaweb-day03-mysql/image-20221020012428839.png" alt="image-20221020012428839">  </p>
<h2 id="二、解压"><a href="#二、解压" class="headerlink" title="二、解压"></a>二、解压</h2><p>下载完成后我们得到的是一个压缩包，将其解压，我们就可以得到MySQL 8.0.31 的软件本体了(就是一个文件夹)，我们可以把它放在你想安装的位置 。</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20221020013011737.png" alt="image-20221020013011737"> </p>
<h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><h3 id="1-添加环境变量"><a href="#1-添加环境变量" class="headerlink" title="1. 添加环境变量"></a>1. 添加环境变量</h3><blockquote>
<p>环境变量里面有很多选项，这里我们只用到<code>Path</code>这个参数。为什么在初始化的开始要添加环境变量呢？</p>
<p>在黑框(即CMD)中输入一个可执行程序的名字，Windows会先在环境变量中的<code>Path</code>所指的路径中寻找一遍，如果找到了就直接执行，没找到就在当前工作目录找，如果还没找到，就报错。我们添加环境变量的目的就是能够在任意一个黑框直接调用MySQL中的相关程序而不用总是修改工作目录，大大简化了操作。</p>
</blockquote>
<p>右键<code>此电脑</code>→<code>属性</code>，点击<code>高级系统设置</code></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/1556823-20181220220242472-524708778.png" alt="img"> </p>
<p>点击<code>环境变量</code></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/1556823-20181220220359609-736422950.png" alt="img"> </p>
<p>在<code>系统变量</code>中新建MYSQL_HOME</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20221020013128323.png" alt="image-20221020013128323">  </p>
<p>在<code>系统变量</code>中找到并<strong>双击</strong><code>Path</code></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/1556823-20181220220551145-1198958872.png" alt="img"> </p>
<p>点击<code>新建</code></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20201109135248104.png" alt="image-20201109135248104"> </p>
<p>最后点击确定。</p>
<p><strong>如何验证是否添加成功？</strong></p>
<p>右键开始菜单(就是屏幕左下角)，选择<code>命令提示符(管理员)</code>，打开黑框，敲入<code>mysql</code>，回车。</p>
<img src="/2024/02/06/javaweb-day03-mysql/image-20221020013302450.png" alt="image-20221020013302450" style="zoom:67%;"> 

<p>如果提示<code>Can&#39;t connect to MySQL server on &#39;localhost&#39;</code>则证明添加成功；</p>
<img src="/2024/02/06/javaweb-day03-mysql/image-20221020013335596.png" alt="image-20221020013335596" style="zoom:80%;"> 

<p>如果提示<code>mysql不是内部或外部命令，也不是可运行的程序或批处理文件</code>则表示添加添加失败，请重新检查步骤并重试。</p>
<h3 id="2-初始化MySQL"><a href="#2-初始化MySQL" class="headerlink" title="2. 初始化MySQL"></a>2. 初始化MySQL</h3><p>&#x3D;&#x3D;以管理员身份，运行命令行窗口：&#x3D;&#x3D;</p>
<img src="/2024/02/06/javaweb-day03-mysql/image-20220518172922780.png" alt="image-20220518172922780" style="zoom: 80%;">

<p>在刚才的命令行中，输入如下的指令： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/06/javaweb-day03-mysql/image-20201109140955772.png" alt="image-20201109140955772"> </p>
<p>稍微等待一会，如果出现没有出现报错信息，则证明data目录初始化没有问题，此时再查看MySQL目录下已经有data目录生成。</p>
<p>tips：如果出现如下错误</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20201109135848054.png" alt="image-20201109135848054"> </p>
<p>是由于权限不足导致的，以管理员方式运行 cmd</p>
<img src="/2024/02/06/javaweb-day03-mysql/image-20220518172922780.png" alt="image-20220518172922780" style="zoom: 80%;"> 

<h3 id="3-注册MySQL服务"><a href="#3-注册MySQL服务" class="headerlink" title="3. 注册MySQL服务"></a>3. 注册MySQL服务</h3><p>命令行（注意必须以管理员身份启动）中，输入如下的指令，回车执行： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/06/javaweb-day03-mysql/image-20201109141325810.png" alt="image-20201109141325810"> </p>
<p>现在你的计算机上已经安装好了MySQL服务了。</p>
<h3 id="4-启动MySQL服务"><a href="#4-启动MySQL服务" class="headerlink" title="4. 启动MySQL服务"></a>4. 启动MySQL服务</h3><p>在黑框里敲入<code>net start mysql</code>，回车。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">net start mysql  <span class="comment">// 启动mysql服务</span></span><br><span class="line">    </span><br><span class="line">net stop mysql  <span class="comment">// 停止mysql服务</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/06/javaweb-day03-mysql/image-20220518183747072.png" alt="image-20220518183747072"> </p>
<h3 id="5-修改默认账户密码"><a href="#5-修改默认账户密码" class="headerlink" title="5. 修改默认账户密码"></a>5. 修改默认账户密码</h3><p>在黑框里敲入<code>mysqladmin -u root password 1234</code>，这里的<code>1234</code>就是指默认管理员(即root账户)的密码，可以自行修改成你喜欢的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password 1234</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/06/javaweb-day03-mysql/1556823-20181221093251250-819416425.png" alt="img"> </p>
<h2 id="四、登录MySQL"><a href="#四、登录MySQL" class="headerlink" title="四、登录MySQL"></a>四、登录MySQL</h2><p>右键开始菜单，选择<code>命令提示符</code>，打开黑框。<br>在黑框中输入，<code>mysql -uroot -p1234</code>，回车，出现下图且左下角为<code>mysql&gt;</code>，则登录成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p1234</span><br></pre></td></tr></table></figure>

<img src="/2024/02/06/javaweb-day03-mysql/image-20221020013540957.png" alt="image-20221020013540957" style="zoom:80%;">   

<p><strong>到这里你就可以开始你的MySQL之旅了！</strong></p>
<p>退出mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<p>登陆参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认127.0.0.1) -P端口号(默认3306)</span><br></pre></td></tr></table></figure>

<h2 id="五、卸载MySQL"><a href="#五、卸载MySQL" class="headerlink" title="五、卸载MySQL"></a>五、卸载MySQL</h2><p>如果你想卸载MySQL，也很简单。</p>
<p>点击开始菜单，输入cmd，选择 “命令提示符”，选择右侧的 “以管理员身份运行”。</p>
<img src="/2024/02/06/javaweb-day03-mysql/image-20220611083741275.png" alt="image-20220611083741275" style="zoom:80%;"> 

<ol>
<li>敲入<code>net stop mysql</code>，回车。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/06/javaweb-day03-mysql/1556823-20181220222924783-57600848.png" alt=" "> </p>
<ol start="2">
<li>再敲入<code>mysqld -remove mysql</code>，回车。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld -remove mysql</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/06/javaweb-day03-mysql/1556823-20181220223025128-587235464.png" alt="img"> </p>
<ol start="3">
<li>最后删除MySQL目录及相关的环境变量。</li>
</ol>
<p><strong>至此，MySQL卸载完成！</strong></p>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><ul>
<li><p>关系型数据库（RDBMS）：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。</p>
<p>特点：</p>
<ul>
<li>使用表存储数据，格式统一，便于维护</li>
<li>使用SQL语言操作，标准统一，使用方便，可以用复杂查询</li>
</ul>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206131607795.png" alt="image-20240206131607795"></p>
</li>
</ul>
<h2 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h2><ul>
<li><p>SQL：一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。</p>
<table>
<thead>
<tr>
<th>SQL语句可以单行或者多行书写，以分号结尾。</th>
<th>show databases;</th>
</tr>
</thead>
<tbody><tr>
<td>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</td>
<td>show  databases;</td>
</tr>
<tr>
<td>MySQL数据库的SQL语句不区分大小写。</td>
<td>SHOW DATABASES;</td>
</tr>
<tr>
<td>注释： 单行注释：– 注释内容 或 # 注释内容（MySQL特有）</td>
<td>–show databases;</td>
</tr>
<tr>
<td>多行注释：&#x2F;* 注释内容 *&#x2F;</td>
<td>&#x2F;* show database; *&#x2F;</td>
</tr>
</tbody></table>
</li>
<li><p>SQL语句通常被分为四大类：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>全称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DDL</td>
<td>Data Definition Language</td>
<td>数据定义语言，用来定义数据库对象（数据库，表，字段）</td>
</tr>
<tr>
<td>DML</td>
<td>Data Manipulation Language</td>
<td>数据操作语言，用来对数据表中的数据进行增删改</td>
</tr>
<tr>
<td>DQL</td>
<td>Data Query Language</td>
<td>数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr>
<td>DCL</td>
<td>Data Control Language</td>
<td>数据控制语言，用来创建数据库用户，控制数据库的访问权限</td>
</tr>
</tbody></table>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206132230078.png" alt="image-20240206132230078"></p>
</li>
</ul>
<h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>– 查询所有数据库<br>show databases;</p>
<p>– 创建数据库<br>create database if not exists db02;</p>
<p>–删除数据库</p>
<p>drop database if exists db02;</p>
<p>注意事项：</p>
<ul>
<li>上述语法中的databse，也可以替换成schema。如 create schema db01;</li>
</ul>
<h2 id="图形化工具"><a href="#图形化工具" class="headerlink" title="图形化工具"></a>图形化工具</h2><p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206135040052.png" alt="image-20240206135040052"></p>
<p>jetbrain已经将datagrip中的功能集成到了intellij idea中。</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206134857300.png" alt="image-20240206134857300"></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206135024009.png" alt="image-20240206135024009"></p>
<h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><ul>
<li><p>创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名&#123;</span><br><span class="line">	字段<span class="number">1</span> 字段类型 [约束] [comment 字段<span class="number">1</span>注释],</span><br><span class="line">	...</span><br><span class="line">    字段n 字段类型 [约束] [comment 字段n注释],	</span><br><span class="line">&#125;[comment 表注释];</span><br></pre></td></tr></table></figure>
</li>
<li><p>约束</p>
<ul>
<li>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</li>
<li>目的：保证数据库中的数据正确性，有效性和完整性。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>非空约束</td>
<td>限制该字段值不能为null</td>
<td>not null</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证字段的所有数据都是唯一、不重复的</td>
<td>unique</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一标识、要求非空且唯一</td>
<td>primary key（auto_increment)</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，如果未指定该字段值，这采用默认值</td>
<td>default</td>
</tr>
<tr>
<td>外键约束</td>
<td>让两张表的数据建立连接，保证数据的一致性和完整性</td>
<td>foreign key</td>
</tr>
</tbody></table>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206140150269.png" alt="image-20240206140150269"></p>
<h1 id="DDL（表操作）"><a href="#DDL（表操作）" class="headerlink" title="DDL（表操作）"></a>DDL（表操作）</h1><ul>
<li><p>数据类型</p>
<p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p>
<p>数值类型：</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206140956703.png" alt="image-20240206140956703"></p>
<p>字符串类型：</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206141713907.png" alt="image-20240206141713907"></p>
<p>日期时间类型：</p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20231102151145540.png" alt="image-20231102151145540"></p>
</li>
</ul>
<h2 id="图形化方式建表"><a href="#图形化方式建表" class="headerlink" title="图形化方式建表"></a>图形化方式建表</h2><p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206142527606.png" alt="image-20240206142527606"></p>
<hr>

<ul>
<li><p>查询</p>
<ul>
<li>查询当前数据库所有表：show tables;</li>
<li>查询表结构：desc 表名；</li>
<li>查询建表语句：show create table 表名；</li>
</ul>
</li>
</ul>
<hr>

<ul>
<li><p>修改</p>
<ul>
<li><p>添加字段：alter table 表名 add 字段名 类型（长度） [comment 注释] [约束];</p>
</li>
<li><p>修改字段类型：alter table 表名 modify 字段名 新数据类型（长度）;</p>
</li>
<li><p>修改字段名和字段类型：alter table 表名 change 旧字段名 新字段名 类型（长度） [comment 注释] [约束];</p>
</li>
<li><p>删除字段：alter table 表名 drop column 字段名;</p>
</li>
<li><p>修改表名：rename table 表名 to 新表名;</p>
</li>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DDL：修改表结构</span></span><br><span class="line"><span class="comment">-- 修改：为表 tb_emp添加字段 qq varchar(11)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp <span class="keyword">add</span> qq <span class="type">varchar</span>(<span class="number">11</span>) comment <span class="string">&#x27;QQ&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改：修改表 tb_emp字段类型 qq varchar(13)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp modify qq <span class="type">varchar</span>(<span class="number">11</span>) comment <span class="string">&#x27;QQ&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改： 修改表 tb_emp 字段名 qq为 qq_num  varchar(13)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp change qq qq_num <span class="type">varchar</span>(<span class="number">13</span>) comment <span class="string">&#x27;QQ&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改：删除tb_emp的qq_num字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp <span class="keyword">drop</span> <span class="keyword">column</span>  qq_num;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改：将tb_emp表修改为 emp</span></span><br><span class="line">rename <span class="keyword">table</span> tb_emp <span class="keyword">to</span> emp;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>

<ul>
<li><p>删除</p>
<ul>
<li>删除表：drop table[if  exists] 表名;</li>
</ul>
</li>
</ul>
<h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><ul>
<li><p>插入数据（INSERT）</p>
<ul>
<li>指定字段添加数据： insert into 表名 （字段名1，字段名2）values(值1，值2);</li>
<li>全部字段添加数据： insert into 表名 values（值1，值2，。。。)</li>
<li>批量添加数据（指定字段）：insert into 表名（字段名 1，字段名2） values（值1，值2）（值1，值2）;</li>
<li>批量添加数据（全部字段）：insert into 表名 values（值1，值2，…)，（值1，值2，…);</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DML: 数据操作语言</span></span><br><span class="line"><span class="comment">-- DML：插入数据 - insert</span></span><br><span class="line"><span class="comment">-- 1. 为 emp 表的username, name, gender字段插入值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (username,name,gender,create_time,update_time) <span class="keyword">values</span> (<span class="string">&#x27;wuji&#x27;</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="number">1</span>,now(),now());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 为emp表的所有字段插入值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id, username, password, name, gender, image, job, entrydate, create_time, update_time) <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;zhiruo&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;周芷若&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2010-01-01&#x27;</span>,now(),now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;zhiruo2&#x27;</span>,<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;周芷若2&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2010-01-01&#x27;</span>,now(),now());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 批量为emp表的username, name, gender字段插入值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(username, name, image,  create_time, update_time) <span class="keyword">values</span> (<span class="string">&#x27;weifuwang&#x27;</span>,<span class="string">&#x27;韦一笑&#x27;</span>,<span class="number">1</span>,now(),now()),(<span class="string">&#x27;xieshiwang&#x27;</span>,<span class="string">&#x27;谢逊&#x27;</span>,<span class="number">1</span>,now(),now());</span><br></pre></td></tr></table></figure>



<p>注意事项：</p>
<ol>
<li><p>插入数据时，指定的字段顺序需要与值的顺序一一对应</p>
</li>
<li><p>字符串和日期型数据应该包含在引号中</p>
</li>
<li><p>插入的数据大小，应在字段的规定范围内</p>
</li>
</ol>
</li>
</ul>
<hr>

<ul>
<li><p>更新数据（UPDATE）</p>
<ul>
<li><p>修改数据： update 表名 set 字段1&#x3D;值1，字段2&#x3D;值2，… [where 条件]；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DML：更新数据 - update</span></span><br><span class="line"><span class="comment">-- 1. 将emp表的ID为1的员工，姓名name字段更新为‘张三’</span></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>,update_time<span class="operator">=</span>now() <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 将tb_emp表的所有员工的入职日期更改为‘2020-01-01’</span></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> entrydate <span class="operator">=</span> <span class="string">&#x27;2010-01-01&#x27;</span>, update_time <span class="operator">=</span> now();</span><br></pre></td></tr></table></figure>

<hr></li>
</ul>
</li>
<li><p>删除数据（DELETE）</p>
<ul>
<li>删除数据： delete from 表名 where [条件];</li>
</ul>
<p>注意事项：</p>
<ol>
<li>DELETE语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</li>
<li>DELETE语句不能删除某一个字段的值（如果要删除，可以使用UPDATE，该字段的值为NULL）.</li>
</ol>
</li>
</ul>
<hr>  

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206151657551.png" alt="image-20240206151657551"></p>
<h1 id="DQL-Data-query-language"><a href="#DQL-Data-query-language" class="headerlink" title="DQL(Data query language)"></a>DQL(Data query language)</h1><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    分组后条件列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    排序字段列表</span><br><span class="line">limit</span><br><span class="line">    分页参数</span><br></pre></td></tr></table></figure>

<ul>
<li>基本查询</li>
<li>条件查询（where）</li>
<li>分组查询（group by）</li>
<li>排序查询（order by）</li>
<li>分页查询（limit）</li>
</ul>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206200329379.png" alt="image-20240206200329379"></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240206201404182.png" alt="image-20240206201404182"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,entrydate <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- (不推荐，性能低)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询所有员工的name, entrydate, 起别名</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> 姓名, entrydate <span class="keyword">as</span> 入职日期 <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询所有员工的name, entrydate, 起别名(别名有空格）</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> <span class="string">&#x27;姓 名&#x27;</span>, entrydate <span class="keyword">as</span> 入职日期 <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询已有的员工关联了哪几种职位（不要重复）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure>



<hr>

<ul>
<li><p>条件查询（where）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>比较运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt; 或 !&#x3D;</td>
<td>不等于</td>
</tr>
<tr>
<td>between … and …</td>
<td>在某个范围之内（含最小，最大值）</td>
</tr>
<tr>
<td>in(…)</td>
<td>在in之后的列表中的值，多选一</td>
</tr>
<tr>
<td>like 占位符</td>
<td>模糊匹配（_匹配单个字符，%匹配任意字符）</td>
</tr>
<tr>
<td>is null</td>
<td>是null</td>
</tr>
<tr>
<td>and 或 &amp;&amp;</td>
<td>并且（多个条件同时成立）</td>
</tr>
<tr>
<td>or 或 ||</td>
<td>或者（多个条件任意一个成立）</td>
</tr>
<tr>
<td>not 或 ||</td>
<td>非，不是</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询姓名为金庸的员工</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;金庸&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询id小于等于5的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询没有分配职位的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询有职位的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 查询密码不等于‘123456’的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">!=</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> password <span class="operator">&lt;&gt;</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 查询入职日在&#x27;2000-01-01&#x27;（包含）到&#x27;2020-01-01&#x27;(包含）之间的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-01-01&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;=</span> <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">and</span> entrydate <span class="operator">&lt;=</span> <span class="string">&#x27;2010-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7. 查询入职时间在&#x27;2000-01-01&#x27;（包含）到&#x27;2010-01-01&#x27;（包含）之间且性别为女的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8. 查询职位是2（讲师），3（学工主管），4（教研主管）的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="number">3</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9. 查询姓名为两个字的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 10. 查询姓‘张’的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>;</span><br></pre></td></tr></table></figure>



  <hr>

<ul>
<li><p>分组查询（group by）</p>
<p>聚合函数：将一列数据作为一个整体，进行纵向运算。</p>
<p>聚合查询语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 聚合函数（字段列表） <span class="keyword">from</span> 表名；</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
</tbody></table>
<p>示例说明：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1、统计该企业的员工数量 -- count</span></span><br><span class="line"><span class="comment">-- A. count(字段）</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(job) <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B. count(常量)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">0</span>) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> tb_emp;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="string">&#x27;a&#x27;</span>) <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- C. count(*)</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 统计该企业最早入职的员工 --min</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 统计该企业最晚入职的员工 --max</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(entrydate) <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 统计该企业员工ID的平均值 --avg</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(id) <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong></p>
<ul>
<li>null值不参与所有聚合函数运算</li>
<li>统计数量可以使用：count(*) count(字段) count(常量)，推荐使用count(*)。</li>
</ul>
<hr>

<p>分组查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组过滤条件];</span><br></pre></td></tr></table></figure>

<ul>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 根据性别分组，统计男性和女性员工的数量 count(*)</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 先查询入职时间在 ’2015-01-01’(包含）以前的员工，并对结果根据职位分组，获取员工数量大于等于2的职位</span></span><br><span class="line"><span class="keyword">select</span> job, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&lt;=</span> <span class="string">&#x27;2015-01-01&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>where和having的区别</p>
<ol>
<li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li>
<li>判断条件不同：<font color="red">where不能对聚合函数判断，而having可以。</font></li>
</ol>
</li>
<li><p>注意事项</p>
<ul>
<li><font color="red">分组之后，查询的字段一般为聚合聚合函数和分组字段，查询其他字段无任何意义。</font></li>
<li>执行顺序：where &gt; 聚合函数 &gt; having。</li>
</ul>
</li>
</ul>
<hr>
</li>
<li><p>排序查询（order by）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组过滤条件] <span class="keyword">order</span> <span class="keyword">by</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>, 字段<span class="number">2</span> 排序方式<span class="number">2</span>, ...;</span><br></pre></td></tr></table></figure>

<p>排序方式</p>
<ul>
<li>ASC：升序排序（默认）</li>
<li>DESC：降序排序</li>
</ul>
<p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 根据入职时间，对员工进行升序排序 --asc</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 根据入职时间，对员工进行降序排序 --desc</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 根据入职时间，对员工进行升序排序，入职时间相同，再根据更新事件进行降序排序 --asc</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate, update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<hr>
</li>
<li><p>分页查询（limit）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 limit 起始索引,查询记录数；</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 从起始索引0开始查询员工数据，每页展示5条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询第1页员工数据，每页展示5条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询第2页员工数据，每页展示5条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">5</span>, <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询第3页员工数据，每页展示5条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp limit <span class="number">10</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong></p>
<ol>
<li>起始索引从0开始，起始索引&#x3D;（查询页码 - 1）* 每页显示记录数。</li>
<li>分页查询是数据库的方言，不同数据库有不同的实现，MySQL是LIMIT。</li>
<li>如果查询的是第一页的数据，其实索引可以省略，可以简写为limit 10。</li>
</ol>
</li>
</ul>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 案例2-1：根据需求，完成员工性别信息的统计</span></span><br><span class="line"><span class="comment">-- 将1转化为男性员工，2转换为女性员工</span></span><br><span class="line"><span class="comment">-- if(条件表达式, true取值, false取值)</span></span><br><span class="line"><span class="keyword">select</span> if(gender<span class="operator">=</span> <span class="number">1</span>,<span class="string">&#x27;男性员工&#x27;</span>,<span class="string">&#x27;女性员工&#x27;</span>) 性别, <span class="built_in">count</span>(gender) 数量 <span class="keyword">from</span> tb_emp <span class="keyword">group</span> <span class="keyword">by</span> (gender);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例2-2：根据需求，完成员工职位信息的统计</span></span><br><span class="line"><span class="comment">-- case 表达式 when 值1 then 结果1 when 值2 then 结果2 ... else ... end</span></span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">case</span> job <span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;班主任&#x27;</span> <span class="keyword">when</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;讲师&#x27;</span> <span class="keyword">when</span> <span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;学工主管&#x27;</span> <span class="keyword">when</span> <span class="number">4</span> <span class="keyword">then</span> <span class="string">&#x27;教研主管&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;未分配职位&#x27;</span> <span class="keyword">end</span>) 职位, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br></pre></td></tr></table></figure>

<p>函数：</p>
<ul>
<li>if(表达式,tvalue,fvalue):当表达式为true时，取值tvalue；当表达式为false时，取值fvalue;</li>
<li>case expr when value1 then result1 [when value2 then result2 …][else result] end</li>
</ul>
<h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><ul>
<li>字段1 [as] 别名1，字段2 [as] 别名2，…</li>
</ul>
<h1 id="多表模式"><a href="#多表模式" class="headerlink" title="多表模式"></a>多表模式</h1><ul>
<li><p>一对多（多对一）</p>
<p>外键：给A中的某个字段加外键（B中某个字段），意味着A中该字段的值要在B中该字段范围内取值。</p>
<p>实现细节：在数据库表中多的一方，添加字段，来关联一方的主键。（使用外键约束建立表联系）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时的指定方式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">constraint</span>][外键名称] <span class="keyword">foreign</span> key(外键字段名) <span class="keyword">references</span> 主表（字段名）</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建完表后的执行方式，添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key(外键字段名) <span class="keyword">references</span> 主表（字段名）;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240207164619163.png" alt="image-20240207164619163"></p>
<p><strong>物理外键</strong></p>
<p>概念：使用foreign  key定义外键关联另外一张表</p>
<p>缺点：</p>
<ul>
<li>影响增、删、改的效率（需要检查外键关系）。</li>
<li>仅用于单节点数据库 ，不适用与分布式、集群场景。</li>
<li>容易引发数据库的死锁问题，消耗性能。</li>
</ul>
<p><strong>逻辑外键（推荐）</strong></p>
<p>概念：在业务逻辑中，解决外键关联。</p>
<p>通过逻辑外键，就可以很方便的解决上述问题。</p>
</li>
<li><p>一对一</p>
<p>案例：用户与身份证信息的关系</p>
<p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他字段放在另一张表中，以提升操作效率</p>
</li>
</ul>
<p>​		实现：<font color="red">在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</font></p>
<ul>
<li><p>多对多</p>
<p>案例：学生与课程的关系</p>
<p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p>
<p>实现：建立第三张中间表，中间表中至少包含两个外键，分别关联两方主键</p>
</li>
</ul>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240207174539789.png" alt="image-20240207174539789"></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240207175403377.png" alt="image-20240207175403377"></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240207181108591.png" alt="image-20240207181108591"></p>
<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><ul>
<li><p>多表查询：指从多张表中查询数据。</p>
</li>
<li><p>笛卡尔积：笛卡尔乘积是指数学中，两个集合的所有组合情况。</p>
</li>
<li><p>分类</p>
<ul>
<li><p>内连接：相当于查询A、B交集部分数据</p>
<p>语法：</p>
<ul>
<li><p>隐式内连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">where</span> 条件 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- A. 查询员工的姓名，及所属的部门名称（隐式内连接实现）</span></span><br><span class="line"><span class="keyword">select</span> tb_dept.name,tb_emp.name <span class="keyword">from</span> tb_emp, tb_dept <span class="keyword">where</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 起别名</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp e, tb_dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显式内连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [<span class="keyword">inner</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- B. 查询员工的姓名，及所属的部门名称（显式内连接实现）</span></span><br><span class="line"><span class="keyword">select</span> tb_emp.name,tb_dept.name <span class="keyword">from</span> tb_emp <span class="keyword">inner</span> <span class="keyword">join</span> tb_dept <span class="keyword">on</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>外连接：</p>
<ul>
<li><p>左外连接：查询左表所有数据（包括两张表交集部分的数据）(经常使用)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A. 查询员工表所有员工的姓名，相对应的部门名称（左外连接）</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> tb_emp e <span class="keyword">left</span> <span class="keyword">join</span> tb_dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>右外连接：查询右表所有数据（包括两张表交集部分的数据）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B. 查询部门表所有部门的名称，和对应的员工名称（右外连接）</span></span><br><span class="line"><span class="keyword">select</span> e.name,d.name <span class="keyword">from</span> tb_emp e <span class="keyword">right</span> <span class="keyword">join</span> tb_dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>子查询</p>
<ul>
<li><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p>
</li>
<li><p>形式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> column1 <span class="operator">=</span> (<span class="keyword">select</span> column1 <span class="keyword">from</span> t2 ... );</span><br></pre></td></tr></table></figure>
</li>
<li><p>子查询外部的语句可以是 insert&#x2F;update&#x2F;delete&#x2F;select中的任何一个，最常见的是select。</p>
</li>
<li><p>分类</p>
<ul>
<li><p>标量子查询：子查询返回的结果为单个值</p>
<ul>
<li><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式</p>
</li>
<li><p>最常见的操作符： &#x3D;   &lt;&gt;   &gt;   &gt;&#x3D;   &lt;   &lt;&#x3D;</p>
<p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A. 查询 “教研部”的所有员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询教研部的ID - tb_dept（标量子查询）</span></span><br><span class="line"><span class="keyword">select</span>  id  <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 查询教研部ID下的员工信息 tb_emp</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span>  dept_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span>  dept_id <span class="operator">=</span> (<span class="keyword">select</span>  id  <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- B. 查询在”方东白“入职之前的员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询方东白的入职时间（单行单列值）</span></span><br><span class="line"><span class="keyword">select</span> entrydate <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 查询在“方东白”入职之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2012-11-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>列子查询：子查询返回的结果为一列</p>
<ul>
<li><p>子查询返回的结果是一列（可以是多行 ）</p>
</li>
<li><p>常用的操作符：in、not in等</p>
</li>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列子查询</span></span><br><span class="line"><span class="comment">-- A. 查询”教研部“和”咨询部“的所有员工信息</span></span><br><span class="line"><span class="comment">-- a. 查询教研部和咨询部的ID</span></span><br><span class="line"><span class="keyword">select</span> id  <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;教研部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 根据部门ID，查询该部门下的员工信息 tb_emp</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> id  <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;教研部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>行子查询：子查询返回的结果为一行</p>
<ul>
<li><p>子查询返回的结果是一行（可以是多列）</p>
</li>
<li><p>常用的操作符： &#x3D;、&lt;&gt;、innot in</p>
</li>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- A. 查询与“韦一笑”的入职日期及值为都相同的员工信息；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- a. 查询“韦一笑”的入职日期及职位</span></span><br><span class="line"><span class="keyword">select</span> entrydate,job <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;韦一笑&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 查询与其入职日期及职位都相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> (entrydate,job) <span class="operator">=</span> (<span class="keyword">select</span> entrydate,job <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;韦一笑&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>表子查询：子查询返回的结果为多行多列</p>
<ul>
<li><p>子查询返回的结果是多行多列，常作为临时表</p>
</li>
<li><p>常用的操作符：in</p>
</li>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表子查询</span></span><br><span class="line"><span class="comment">-- A. 查询入职日期是“2006-01-01”之后的员工信息，及其部门名称</span></span><br><span class="line"><span class="comment">-- a.查询入职日期是”2006-01-01“之后的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b.查询这部分员工信息及其部门名称 - tb_dept</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>,d.name <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) e, tb_dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>实操</strong></p>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240208165030152.png" alt="image-20240208165030152"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 部门管理</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_dept</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">    create_time datetime    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_dept (id, name, create_time, update_time)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;学工部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;教研部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;咨询部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;就业部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;人事部&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工管理</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_emp</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    username    <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">10</span>)      <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender      tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">    image       <span class="type">varchar</span>(<span class="number">300</span>) comment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">    job         tinyint unsigned comment <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;</span>,</span><br><span class="line">    entrydate   <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    dept_id     <span class="type">int</span> unsigned comment <span class="string">&#x27;部门ID&#x27;</span>,</span><br><span class="line">    create_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_emp</span><br><span class="line">(id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;jinyong&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;金庸&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1.jpg&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;zhangwuji&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2015-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;yangxiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;3.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2008-05-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;weiyixiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;4.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2007-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;changyuchun&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;5.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2012-12-05&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">6</span>, <span class="string">&#x27;xiaozhao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;6.jpg&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2013-09-05&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">       (<span class="number">7</span>, <span class="string">&#x27;jixiaofu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;纪晓芙&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;7.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2005-08-01&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">       (<span class="number">8</span>, <span class="string">&#x27;zhouzhiruo&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;8.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2014-11-09&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">       (<span class="number">9</span>, <span class="string">&#x27;dingminjun&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;丁敏君&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;9.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2011-03-11&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">       (<span class="number">10</span>, <span class="string">&#x27;zhaomin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;10.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2013-09-05&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">       (<span class="number">11</span>, <span class="string">&#x27;luzhangke&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;鹿杖客&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;11.jpg&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2007-02-01&#x27;</span>, <span class="number">3</span>, now(), now()),</span><br><span class="line">       (<span class="number">12</span>, <span class="string">&#x27;hebiweng&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;鹤笔翁&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;12.jpg&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2008-08-18&#x27;</span>, <span class="number">3</span>, now(), now()),</span><br><span class="line">       (<span class="number">13</span>, <span class="string">&#x27;fangdongbai&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;方东白&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;13.jpg&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2012-11-01&#x27;</span>, <span class="number">3</span>, now(), now()),</span><br><span class="line">       (<span class="number">14</span>, <span class="string">&#x27;zhangsanfeng&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;14.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2002-08-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">15</span>, <span class="string">&#x27;yulianzhou&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;俞莲舟&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2011-05-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">16</span>, <span class="string">&#x27;songyuanqiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;宋远桥&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;16.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2007-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">       (<span class="number">17</span>, <span class="string">&#x27;chenyouliang&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;17.jpg&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2015-03-21&#x27;</span>, <span class="keyword">NULL</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_emp,</span><br><span class="line">     tb_dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tb_emp.name, tb_dept.name</span><br><span class="line"><span class="keyword">from</span> tb_emp,</span><br><span class="line">     tb_dept</span><br><span class="line"><span class="keyword">where</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tb_emp.name, tb_dept.name</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line">         <span class="keyword">join</span> tb_dept <span class="keyword">on</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tb_emp.name, tb_dept.name</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> tb_dept <span class="keyword">on</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tb_emp.name, tb_dept.name</span><br><span class="line"><span class="keyword">from</span> tb_dept</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> tb_emp <span class="keyword">on</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tb_emp.name, tb_dept.name</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line">         <span class="keyword">right</span> <span class="keyword">join</span> tb_dept <span class="keyword">on</span> tb_emp.dept_id <span class="operator">=</span> tb_dept.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> tb_dept.id</span><br><span class="line"><span class="keyword">from</span> tb_dept</span><br><span class="line"><span class="keyword">where</span> tb_dept.name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> tb_dept.id <span class="keyword">from</span> tb_dept <span class="keyword">where</span> tb_dept.name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> entrydate</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> entrydate <span class="operator">&gt;=</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id</span><br><span class="line"><span class="keyword">from</span> tb_dept</span><br><span class="line"><span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span></span><br><span class="line">   <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> tb_dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> entrydate, job</span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;韦一笑&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> (entrydate, job) <span class="operator">=</span> (<span class="keyword">select</span> entrydate, job <span class="keyword">from</span> tb_emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;韦一笑&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> tb_emp</span><br><span class="line"><span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) e,</span><br><span class="line">     tb_dept d</span><br><span class="line"><span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询价格低于10元的菜品的名称、价格及其菜品的分类名称。</span></span><br><span class="line"><span class="keyword">select</span> d.name, d.price, c.name</span><br><span class="line"><span class="keyword">from</span> dish d,</span><br><span class="line">     category c</span><br><span class="line"><span class="keyword">where</span> d.category_id <span class="operator">=</span> c.id</span><br><span class="line">  <span class="keyword">and</span> d.price <span class="operator">&lt;</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询所有价格在10元（含）到50元（含）之间且状态为起售的菜品，展示出菜品的名称、价格及其菜品的分类名称（及时菜品没有分类，也需要将菜品查询出来）</span></span><br><span class="line"><span class="keyword">select</span> d.name, d.price, c.name</span><br><span class="line"><span class="keyword">from</span> dish d</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> category c <span class="keyword">on</span> d.price <span class="keyword">between</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">50</span> <span class="keyword">and</span> d.status <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> c.id <span class="operator">=</span> d.category_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询每个分类下最贵的菜品，展示出分类的名称、最贵的菜品的价格。</span></span><br><span class="line"><span class="keyword">select</span> c.name, <span class="built_in">max</span>(d.price)</span><br><span class="line"><span class="keyword">from</span> dish d,</span><br><span class="line">     category c</span><br><span class="line"><span class="keyword">where</span> d.category_id <span class="operator">=</span> c.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.查询各个分类下，菜品状态为“起售”,并且该分类下菜品总数量大于等于3的分类名称。</span></span><br><span class="line"><span class="keyword">select</span> c.name, <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> category c,</span><br><span class="line">     dish d</span><br><span class="line"><span class="keyword">where</span> c.id <span class="operator">=</span> d.category_id</span><br><span class="line">  <span class="keyword">and</span> d.status <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c.name</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.查询&quot;商务套餐A&quot;中包含了哪些菜品（展示出套餐名称、价格、包含的菜品名称、价格、份数）</span></span><br><span class="line"><span class="keyword">select</span> s.name, s.price, d.name, d.price, sd.copies</span><br><span class="line"><span class="keyword">from</span> setmeal s,</span><br><span class="line">     setmeal_dish sd,</span><br><span class="line">     dish d</span><br><span class="line"><span class="keyword">where</span> s.id <span class="operator">=</span> sd.setmeal_id</span><br><span class="line">  <span class="keyword">and</span> d.id <span class="operator">=</span> sd.dish_id</span><br><span class="line">  <span class="keyword">and</span> s.name <span class="operator">=</span> <span class="string">&#x27;商务套餐A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 查询出低于菜品平均价格的菜品信息（展示出菜品名称、菜品价格）</span></span><br><span class="line"><span class="keyword">select</span> d.name, d.price</span><br><span class="line"><span class="keyword">from</span> dish d</span><br><span class="line"><span class="keyword">where</span> d.price <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(d.price) <span class="keyword">from</span> dish d);</span><br></pre></td></tr></table></figure>



<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul>
<li><p>概念</p>
<p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<blockquote>
<p>注意事项，默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务。</p>
</blockquote>
</li>
<li><p>事务控制</p>
<ul>
<li>开启事务：start transaction; &#x2F; begin；</li>
<li>提交事务：commit；</li>
<li>回滚事务：rollback；</li>
</ul>
</li>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除部门下的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="operator">=</span><span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">commit</span> ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>特性</p>
<ul>
<li>原子性：事务是不可分割的最小单元，要么全部成功 ，要么全部失败</li>
<li>一致性：事务完成时，必须使所有的数据都保持一致状态</li>
<li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>
<li>持久性：事务一旦提交或回滚，它对数据库中的数据改变就是永久的</li>
</ul>
</li>
</ul>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><ul>
<li><p>概念：索引使帮助数据库高校获取数据的数据结构。</p>
</li>
<li><p>优点：</p>
<ul>
<li><p>提升数据库查询的效率，降低数据库的IO成本</p>
</li>
<li><p>通过索引对数据进行排序，降低数据排序的成本，降低CPU消耗</p>
</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>索引会占用存储空间。（存储空间问题不大）</li>
<li>索引大大提高了查询效率，同时也降低了insert，update，delete的效率。（查询占据90%以上的工作量）</li>
</ul>
</li>
<li><p>结构：</p>
<p>MySQL数据库支持的索引结构有很多，如：Hash索引，B+Tree索引，Full-Text索引等。我们平常说的索引，如果没有特别指明 ，都是指默认的B+Tree结构组织的索引。</p>
<blockquote>
<p>采用二叉搜索树或红黑树，会导致大数据量情况下，层级深，检索速度慢。</p>
</blockquote>
<ul>
<li><p>B+ Tree(多路平衡搜索树)</p>
<ul>
<li>每一个节点，可以存储多个key(有n个key，就有n个指针)。</li>
<li>所有数据都存储在叶子节点，非叶子节点仅用于索引数据。</li>
<li>叶子节点形成一颗双向链表，便于数据的排序及区间范围查询。</li>
</ul>
<p><img src="/2024/02/06/javaweb-day03-mysql/image-20240208173844570.png" alt="image-20240208173844570"></p>
</li>
</ul>
</li>
<li><p>语法</p>
<ul>
<li><p>创建索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span>] index 索引名 <span class="keyword">on</span> 表名(字段名,...)；</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名 <span class="keyword">on</span> 表名;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建：为 tb_emp表的name字段建立一个索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_emp_name <span class="keyword">on</span> tb_emp(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询：查询tb_emp表的索引信息</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tb_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除：删除tb_emp表中name字段的索引</span></span><br><span class="line"><span class="keyword">drop</span> index idx_emp_name <span class="keyword">on</span> tb_emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>主键字段，在建表时，会自动创建主键索引。</li>
<li>添加唯一约束时，数据库实际上会添加唯一索引。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
  </entry>
  <entry>
    <title>javaweb-day02-springbootweb请求响应</title>
    <url>/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205175737760.png" alt="image-20240205175737760"></p>
<ol>
<li><p>通过浏览器访问服务器，请求结束后返回响应结果</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205175907200.png" alt="image-20240205175907200"></p>
<p>之前编写的Controller只是简单的java类，没有实现任何的接口或者继承任何类，这个类Tomcat是不识别的，也不能直接运行，Tomcat虽然不识别自己编写的Controller，但是识别Servlet容器。</p>
<p>前段浏览器发起的请求都会经过DispatcherServlet，它会转给各个Controller，由Controller处理请求，将请求处理后的结果返回给DispatcherServlet，由于它的重要性，我们将其称为前端控制器。</p>
<ul>
<li>Web服务器将浏览器发来的数据进行解析，得到HttpServletRequest</li>
<li>将解析的处理结果处理为HttpServltResponse返回给浏览器</li>
</ul>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205180637734.png" alt="image-20240205180637734"></p>
</li>
<li><p>客户端通过HTTP协议与浏览器进行交流</p>
</li>
</ol>
<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><h2 id="请求工具"><a href="#请求工具" class="headerlink" title="请求工具"></a>请求工具</h2><p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205181106830.png" alt="image-20240205181106830"></p>
<p><strong>postman</strong></p>
<p>postman是一款功能强大的网页调试与发送网页HTPP请求的Chrome插件。</p>
<p>作用：常用于进行接口测试。</p>
<h2 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h2><ul>
<li><p>原始方式</p>
<p>在原始的web程序中，获取请求参数，需要通过HttpServletRequest对象手动获取。</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205181550921.png" alt="image-20240205181550921"></p>
</li>
</ul>
<p>​		缺点：操作方式比较繁琐，需要将HttpServletRequest进行类型转换</p>
<ul>
<li><p>Springboot方式（下面左侧黄色部分是sprinboot接受简单参数的函数编写方式，右侧是postman分别使用get和post请求方式的发送效果），<font color="red">只要形参名和发送参数名一致就可自动接收成功。</font></p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205183539465.png" alt="image-20240205183539465"></p>
</li>
</ul>
<p>​	如果方法形参名称与请求参数名称不匹配，可以使用@RequestParam完成映射。</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205184136093.png" alt="image-20240205184136093"></p>
<p>注意事项：@RequestParam中的required属性默认为True，代表该请求参数必须传递，如果不传递将报错。如果该参数是可以选择的，可以将required的属性设置为false。</p>
<p>总结：</p>
<ol>
<li><p>原始方法获取请求参数</p>
<ul>
<li>Controller方法形参中声明HttpServletRequest对象</li>
<li>调用对象的getParameter(参数名)</li>
</ul>
</li>
<li><p>SpringBoot中接受简单参数</p>
<ul>
<li>请求参数名与方法形参变量名相同</li>
<li>会自动进行类型转换</li>
</ul>
</li>
<li><p>@RequestParam注解</p>
<ul>
<li>方法形参名称与请求参数名称不匹配</li>
<li>该注解的required属性默认是true，代表请求参数必须传递</li>
</ul>
</li>
</ol>
<h2 id="实体参数（应对简单参数数量过多的情况）"><a href="#实体参数（应对简单参数数量过多的情况）" class="headerlink" title="实体参数（应对简单参数数量过多的情况）"></a>实体参数（应对简单参数数量过多的情况）</h2><ul>
<li><p>简单实体对象：请求参数名与形参对象属性名相同，定义POJO接受即可。</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205185118298.png" alt="image-20240205185118298"></p>
</li>
</ul>
<h2 id="复杂实体参数（应对参数非简单类型的情况）"><a href="#复杂实体参数（应对参数非简单类型的情况）" class="headerlink" title="复杂实体参数（应对参数非简单类型的情况）"></a>复杂实体参数（应对参数非简单类型的情况）</h2><ul>
<li><p>复杂实体对象：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数。（<font color="red">与简单实体参数一致，只要保证对应的嵌套关系不发生变化即可</font>）</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205190319798.png" alt="image-20240205190319798"></p>
</li>
</ul>
<h2 id="数组集合参数（形参可以是数组或者集合）"><a href="#数组集合参数（形参可以是数组或者集合）" class="headerlink" title="数组集合参数（形参可以是数组或者集合）"></a>数组集合参数（形参可以是数组或者集合）</h2><ul>
<li><p>数组参数：请求参数与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205190631950.png" alt="image-20240205190631950"></p>
</li>
<li><p>集合参数：请求参数名与形参集合名称相同且请求参数为多个，@RequestParam绑定参数关系。</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205191132398.png" alt="image-20240205191132398"></p>
</li>
</ul>
<h2 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h2><ul>
<li><p>日期参数：使用@DateTimeFormat注解完成日期参数格式转换</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205191314005.png" alt="image-20240205191314005"></p>
</li>
</ul>
<h2 id="Json参数"><a href="#Json参数" class="headerlink" title="Json参数"></a>Json参数</h2><ul>
<li><p>JSON参数：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用@RequestBody标识</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205192029505.png" alt="image-20240205192029505"></p>
</li>
</ul>
<h2 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h2><ul>
<li><p>路径参数：通过请求URL直接传递参数，使用{…}来表示该路径参数，需要使用@PathVariable获取路径参数</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205192557467.png" alt="image-20240205192557467"></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205192747492.png" alt="image-20240205192747492"></p>
<h1 id="响应数据-允许返回各种类型的数据"><a href="#响应数据-允许返回各种类型的数据" class="headerlink" title="响应数据(允许返回各种类型的数据)"></a>响应数据(允许返回各种类型的数据)</h1><p>浏览器发起请求后服务器响应会返回响应的数据。</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205193201481.png" alt="image-20240205193201481"></p>
<p>@ResponseBody（将方法的返回值直接作为响应数据响应给客户端浏览器）</p>
<ul>
<li>类型：方法注解、类注解</li>
<li>位置：Controller方法上&#x2F;类上</li>
<li>作用：将方法返回值直接响应，<font color="red">如果返回值类型是实体对象&#x2F;集合，将会转化为JSON格式响应</font></li>
<li>说明：@RestController&#x3D;@Controller+@ResponseBody</li>
</ul>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205194650624.png" alt="image-20240205194650624"></p>
<p>由于不同页面的解析结果不同，为了便于管理，提出了以下的统一响应结果</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205194823402.png" alt="image-20240205194823402"></p>
<p><strong>总结</strong></p>
<ol>
<li><p>@ResponseBody</p>
<p>位置：Controller类上&#x2F;方法上</p>
<p>作用：将方法返回值直接响应，若返回值类型是实体对象&#x2F;集合，转JSON格式响应</p>
</li>
<li><p>统一响应结果</p>
<p>Result(code, msg, data)</p>
</li>
</ol>
<p><strong>案例</strong></p>
<p>获取员工数据，返回统一响应结果，在页面渲染展示</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205195526399.png" alt="image-20240205195526399"></p>
<p>步骤</p>
<ol>
<li>在pom.xml文件中引入dom4j的依赖，用于解析XML文件</li>
<li>引入资料中提供的解析XML的工具类XMLParserUtils，对应的实体类Emp，XML文件emp.xml</li>
<li>引入资料中提供的静态页面文件，放到resources下的static目录下</li>
<li>编写Controller程序，处理请求，响应数据</li>
</ol>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205200314718.png" alt="image-20240205200314718"></p>
<h1 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205220155037.png" alt="image-20240205220155037"></p>
<p>三层架构</p>
<ul>
<li><p>controller：控制层，接收前端发起的请求，对请求进行处理，并响应数据</p>
</li>
<li><p>service：业务逻辑层，处理具体的业务逻辑。</p>
</li>
<li><p>dao：数据访问层（Data Access Object）（持久层），负责数据访问操作，包括数据的增删改查。</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205220322441.png" alt="image-20240205220322441"></p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205221510610.png" alt="image-20240205221510610"></p>
</li>
</ul>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205221614917.png" alt="image-20240205221614917"></p>
<h2 id="分层解耦-1"><a href="#分层解耦-1" class="headerlink" title="分层解耦"></a>分层解耦</h2><ul>
<li>内聚：软件中各个功能模块内部的功能联系。</li>
<li>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联程度。</li>
<li>软件设计原则：高内聚低耦合。</li>
</ul>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205222503596.png" alt="image-20240205222503596"></p>
<p><font color="red">目前的controller层和service层是耦合的，service层发生变动会导致controller层的代码也要做出相应的调整。</font></p>
<p><font color="red">于是springboot出现了容器的概念，容器存放创建的对象，controller需要什么样的service对象就从容器中提取。要实现这一步，需要解决两个问题，如何将service层的对象装入容器中，如何从controller层读取容器的内容。分别对应了两个问题，控制反转和依赖注入。</font></p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205223108844.png" alt="image-20240205223108844"></p>
<p>控制反转：Inversion Of Control，简称<font color="red">IOC</font>。对象的创建控制权是由程序自身转移到外部（容器）这种思想称为控制反转。</p>
<p>依赖注入：Dependency Injection，简称<font color="red">DI</font>。容器为应用程序提供运行时，所依赖的资源，称为依赖注入。</p>
<p>Bean对象：IOC容器中创建、管理的对象，称之为<font color="red">bean</font>。</p>
<h2 id="IOC-DI-入门"><a href="#IOC-DI-入门" class="headerlink" title="IOC &amp;  DI 入门"></a>IOC &amp;  DI 入门</h2><ol>
<li>Service层及Dao层的实现类，交给IOC容器管理。</li>
<li>为Controller及Service注入运行时，依赖的对象。</li>
<li>运行测试。</li>
</ol>
<p>实现机制</p>
<p>给EmpServer层和EmpDao层对应的类加上注释@Component，表示将当前类交给IOC容器管理，称为IOC容器红的Bean对象。完成了控制反转。</p>
<p>给Controller层的service变量和EmpService层的dao对象加上@Autowired注释，表示运行时，IOC容器会提供该类型的Bean对象，并赋值给该变量，完成了依赖注入。</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205224114750.png" alt="image-20240205224114750"></p>
<h2 id="IOC详解（控制反转）"><a href="#IOC详解（控制反转）" class="headerlink" title="IOC详解（控制反转）"></a>IOC详解（控制反转）</h2><p>Bean的声明</p>
<p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下的注释之一：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>声明bean的基础注解</td>
<td>不属于以下三类时，用此注解</td>
</tr>
<tr>
<td>@Controller</td>
<td>@Component的衍生注解</td>
<td>标注在控制器类上</td>
</tr>
<tr>
<td>@Service</td>
<td>@Component的衍生注解</td>
<td>标注在业务类上</td>
</tr>
<tr>
<td>@Repository</td>
<td>@Component的衍生注解</td>
<td>标注在数据访问类上（由于与mybatis整合，用的较少）</td>
</tr>
</tbody></table>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205230749072.png" alt="image-20240205230749072"></p>
<p>注意事项</p>
<ul>
<li>声明Bean的时候，可以通过value属性指定Bean的名字，如果没有指定，默认为类名首字母小写。</li>
<li>使用以上四个注释都可以声明bean，但是在springboot继承web开发中，Controller层声明的bean只能用Controller注释。</li>
</ul>
<p><strong>Bean组件扫描</strong></p>
<ul>
<li><p>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描。</p>
</li>
<li><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解@SpringBootApplication中，默认扫描的范围时启动类所在包及其子包。</p>
<p>显式指定扫描范围的示例</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205231744806.png" alt="image-20240205231744806"></p>
</li>
</ul>
<h2 id="DI详解（出现多个同类型的Bean对象时该如何办）"><a href="#DI详解（出现多个同类型的Bean对象时该如何办）" class="headerlink" title="DI详解（出现多个同类型的Bean对象时该如何办）"></a>DI详解（出现多个同类型的Bean对象时该如何办）</h2><p>Bean注入</p>
<ul>
<li><p>Autowired注解，默认是按照类型进行，如果存在多个相同类型的bean，将会报以下错误：</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205232248743.png" alt="image-20240205232248743"></p>
</li>
<li><p>解决方法如下所示：</p>
<ul>
<li><p>@Primary（加在两个竞争的小类上方）</p>
</li>
<li><p>@Qualifier（加在大类的变量上方）（权限最高，比primary的权限高）</p>
</li>
<li><p>@Resource（去掉autowired，加在大类的变量上方）</p>
<p><img src="/2024/02/05/javaweb-day02-springbootweb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/image-20240205233023664.png" alt="image-20240205233023664"></p>
</li>
</ul>
</li>
</ul>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol>
<li>依赖注入的注解<ul>
<li>Autowired：默认按照类型自动装配。</li>
<li>如果同类型的bean存在多个：<ul>
<li>@Primary</li>
<li>@Autowired + @Qualified(“bean的名称”)</li>
<li>@Resource(name &#x3D; “bean的名称”)</li>
</ul>
</li>
</ul>
</li>
<li>@Resource和@Autowired的区别<ul>
<li>@Autowired是spring框架提供的注解，而@Resource是JDK提供的注解。</li>
<li>@Autowired默认是按照类型注入，而@Resource是默认按照名称注入，名称未指定的话默认是首字母小写的类名</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
  </entry>
  <entry>
    <title>javaweb_day01_maven_springbootweb入门</title>
    <url>/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="什么是maven"><a href="#什么是maven" class="headerlink" title="什么是maven?"></a>什么是maven?</h1><p>maven是apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p>
<h1 id="maven的作用"><a href="#maven的作用" class="headerlink" title="maven的作用"></a>maven的作用</h1><ul>
<li><p>依赖管理</p>
<p>方便快捷的管理项目依赖的资源（jar包），避免版本冲突问题</p>
<p>创建maven项目后，要使用什么jar包，不用再单独导入，只要在pom.xml文件的dependencies下引入即可。</p>
</li>
<li><p>统一项目结构</p>
<p>  提供标准、统一的项目结构</p>
<blockquote>
<p>eclipse、myeclipse、intellij idea各个java编译器产生的java项目是不能直接互相导入的，通过maven可以提供标准、统一的项目结构</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240116155606951.png" alt="image-20240116155606951"></p>
</blockquote>
<p>  项目目录结构如下所示</p>
</li>
<li><p>项目构建</p>
<p>  标准跨平台（Linux、Windows、MacOS）的自动化项目构建方式</p>
<p>  <img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240116155754884.png" alt="image-20240116155754884"></p>
</li>
</ul>
<h1 id="Maven概述"><a href="#Maven概述" class="headerlink" title="Maven概述"></a>Maven概述</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>Apache Maven是一个项目管理和构建工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建。(POM：project object model)</li>
<li>作用<ul>
<li>方便的依赖管理</li>
<li>统一的项目结构</li>
<li>标准的项目构建流程</li>
</ul>
</li>
<li>官网：<a href="http://maven.apache.org/">http://maven.apache.org/</a></li>
</ul>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240116161041259.png" alt="image-20240116161041259"></p>
<p>仓库：用于存储资源，管理各种jiar包。</p>
<ul>
<li>本地仓库：自己计算机上的一个目录。</li>
<li>中央仓库：由maven团队维护的全球唯一的。仓库地址：<a href="https://repo1/maven.org/maven2/">https://repo1/maven.org/maven2/</a></li>
<li>远程仓库（私服）：一般由公司团队搭建的私有仓库。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>安装步骤</p>
<ol>
<li><p>解压apche-maven-3.6.1-bin.zip</p>
</li>
<li><p>配置本地仓库：修改conf&#x2F;settings.xml中的&lt;localRepository&gt;为一个指定目录，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\module\apache-maven-3.6.1-bin\apache-maven-3.6.1\mvn_repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置阿里云私服：修改conf&#x2F;settings.xml中的&lt;mirrors&gt;标签，为其添加如下子标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/group/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量：MAVEN_HOME为maven的解压目录，并将其bin目录加入到PATH环境变量。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240116162338034.png" alt="image-20240116162338034"></p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240116162402754.png" alt="image-20240116162402754"></p>
</li>
</ol>
</li>
<li><p>测试</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240116162547523.png" alt="image-20240116162547523"></p>
</li>
</ul>
<h1 id="IDEA继承MAVEN"><a href="#IDEA继承MAVEN" class="headerlink" title="IDEA继承MAVEN"></a>IDEA继承MAVEN</h1><h2 id="全局配置Maven环境"><a href="#全局配置Maven环境" class="headerlink" title="全局配置Maven环境"></a>全局配置Maven环境</h2><ol>
<li>进入全局设置</li>
</ol>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117143305873.png" alt="image-20240117143305873"></p>
<ol start="2">
<li><p>配置maven三件套（本地目录，settings.xml，本地仓库）</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117143430051.png" alt="image-20240117143430051"></p>
</li>
<li><p>配置JRE版本</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117143458156.png" alt="image-20240117143458156"></p>
</li>
<li><p>配置字节码文件版本</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117143512837.png" alt="image-20240117143512837"></p>
</li>
</ol>
<h2 id="本地配置Maven环境"><a href="#本地配置Maven环境" class="headerlink" title="本地配置Maven环境"></a>本地配置Maven环境</h2><ul>
<li><p>选择IDEA中File–&gt;Settings–&gt;Build，Execution,Deployment–&gt;Build Tools–&gt;Maven</p>
</li>
<li><p>设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117141244693.png" alt="image-20240117141244693"></p>
</li>
<li><p>配置Runner，确保JRE是对应的版本</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117141340811.png" alt="image-20240117141340811"></p>
</li>
<li><p>配置JAVA语言的字节码版本为特定版本File–&gt;Settings–&gt;Build，Execution,Deployment–&gt;Complier–&gt;Java Complier</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117143111362.png" alt="image-20240117143111362"></p>
</li>
</ul>
<h2 id="本地从0开始创建Maven项目"><a href="#本地从0开始创建Maven项目" class="headerlink" title="本地从0开始创建Maven项目"></a>本地从0开始创建Maven项目</h2><ol>
<li><p>创建项目目录</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117142650306.png" alt="image-20240117142650306"></p>
</li>
<li><p>创建项目</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117142733138.png" alt="image-20240117142733138"></p>
</li>
<li><p>设置maven仓库File–&gt;Settings–&gt;Build，Execution,Deployment–&gt;Build Tools–&gt;Maven</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117142851099.png" alt="image-20240117142851099"></p>
</li>
<li><p>配置Runner，确定JRE的版本</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117143024667.png" alt="image-20240117143024667"></p>
</li>
<li><p>配置JAVA语言的字节码版本为特定版本File–&gt;Settings–&gt;Build，Execution,Deployment–&gt;Complier–&gt;Java Complier</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117143111362.png" alt="image-20240117143111362"></p>
</li>
</ol>
<h2 id="经过全局配置后通过模块创建项目"><a href="#经过全局配置后通过模块创建项目" class="headerlink" title="经过全局配置后通过模块创建项目"></a>经过全局配置后通过模块创建项目</h2><ol>
<li><p>创建模块，选择Maven，点击Next</p>
</li>
<li><p>填写模块名称，坐标信息，点击finish，创建完成</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117144720513.png" alt="image-20240117144720513"></p>
</li>
<li><p>观察生成的项目结构</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117145350061.png" alt="image-20240117145350061"></p>
<p>注意，main目录下存放的项目的资源，test目录下存放的是测试的相关资源，二者应该是一一对应的，但是刚生成的test目录下没有resources,这个时候选中test，右键new directory，它会提示你创建resouces。（上面的图示就是创建好的结果）</p>
<ul>
<li>java目录存放了运行代码。</li>
<li>resources目录下存放了配置信息。</li>
</ul>
</li>
<li><p>编写HelloWorld，File–&gt;New–&gt;Java Class–&gt;com.ithema.HelloWorld</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117145910982.png" alt="image-20240117145910982"></p>
</li>
<li><p>运行后产生target目录，它是Java编译后产生的字节码文件</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117150126244.png" alt="image-20240117150126244"></p>
</li>
</ol>
<h2 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h2><ul>
<li><p>什么是坐标？</p>
<ul>
<li>Maven中的坐标是资源的唯一标识，通过该坐标可以为一定为资源位置。</li>
<li>使用坐标来定义项目或引入项目中需要的依赖。（在porn.xml中添加坐标，相当于导包操作）</li>
</ul>
</li>
<li><p>Maven坐标主要组成</p>
<ul>
<li><p>groupId:定义当前Maven项目隶属组织名称（通常是域名反写，例如com.itheima）</p>
</li>
<li><p>artifactId：定义当前Maven项目名称（通常是模块名称，例如order-service、good-service）</p>
</li>
<li><p>version：定义当前项目版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="导入Maven项目"><a href="#导入Maven项目" class="headerlink" title="导入Maven项目"></a>导入Maven项目</h2><p>方式一：打开IDEA，选择右侧Maven面板，点击+号，选中对应项目的pom.xml文件，双击即可。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117152800780.png" alt="image-20240117152800780"></p>
<p>方法二：打开IDEA，File–&gt;Project Structure，选中Modules，选中对应项目的pom.xml文件，双击即可</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117155211325.png" alt="image-20240117155211325"></p>
<h2 id="移除Maven项目"><a href="#移除Maven项目" class="headerlink" title="移除Maven项目"></a>移除Maven项目</h2><p>方法一：右键-unlink maven projects</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117153019917.png" alt="image-20240117153019917"></p>
<p>方法二：选中，右键，remove module</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240117153148909.png" alt="image-20240117153148909"></p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><ul>
<li><p>依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。</p>
</li>
<li><p>配置：</p>
<ol>
<li><p>在pom.xml中编写<code>&lt;dependencies&gt;</code>标签</p>
</li>
<li><p>在<code>&lt;dependices&gt;</code>标签中，使用<code>&lt;dependency&gt;</code>引入坐标</p>
</li>
<li><p>定义坐标的groupId，artifactId，version</p>
</li>
<li><p>点击刷新按钮，引入最新加入的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119152117196.png" alt="image-20240119152117196"></p>
</li>
</ol>
</li>
</ul>
<p>注意事项</p>
<ul>
<li>如果引入的依赖，在本地仓库不存在，将会链接远程仓库&#x2F;中央仓库，然后下载依赖。</li>
<li>如果不知道依赖的坐标信息，可以到<a href="https://mvnreposotory.com/%E4%B8%AD%E6%90%9C%E7%B4%A2%E3%80%82">https://mvnreposotory.com/中搜索。</a></li>
</ul>
<h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><ul>
<li><p>依赖具有传递性</p>
<ul>
<li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p>
</li>
<li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119153259194.png" alt="image-20240119153259194"></p>
</li>
</ul>
</li>
<li><p>排除依赖</p>
<p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119154036910.png" alt="image-20240119154036910"></p>
</li>
</ul>
<h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>依赖的jar包，默认情况下，可以在任何地方使用。可以使用<code>&lt;scope&gt;...&lt;/scope&gt;</code>设置其作用范围。</p>
<p>作用范围：</p>
<ul>
<li>主程序范围有效。（main文件夹范围内）</li>
<li>测试程序范围有效。（test文件夹范围内）</li>
<li>是否参与打包运行。（package指令范围内）</li>
</ul>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119154350199.png" alt="image-20240119154350199"></p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119155450407.png" alt="image-20240119155450407"></p>
<p>Maven有3套相互独立的生命周期：</p>
<ul>
<li>clean：清理工作。</li>
<li>default：核心工作，如：编译、测试、打包、安装、部署等。</li>
<li>site：生成报告、发布站点等。</li>
</ul>
<p>每套生命周期包含一些阶段（phase）,阶段是有顺序的，后面的阶段依赖于前面的阶段。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119155612088.png" alt="image-20240119155612088"></p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119160354799.png" alt="image-20240119160354799"></p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240119160447967.png" alt="image-20240119160447967"></p>
<h1 id="SpringBootWeb入门"><a href="#SpringBootWeb入门" class="headerlink" title="SpringBootWeb入门"></a>SpringBootWeb入门</h1><ul>
<li><p>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干子项目，每个项目用于完成特定的功能。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240120130721110.png" alt="image-20240120130721110"></p>
</li>
<li><p>Spring Framework是所有项目的基础框架，它有两大缺点，上手难度大，配置繁琐，因而出现了spring boot这样的简介配置的基础框架。</p>
</li>
<li><p>Spring Boot可以帮助我们非常快速的构建应用程序，简化开发，直接上手。</p>
</li>
</ul>
<p><strong>需求：使用SPringBoot开发一个web应用，浏览器发起请求&#x2F;hello后，给浏览器返回字符串“Hello World ~”</strong></p>
<ol>
<li><p>创建springboot工程，并勾选web开发相关依赖。</p>
</li>
<li><p>定义HelloController类，添加方法hello，并添加注释。</p>
</li>
<li><p>运行测试。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240120132028164.png" alt="image-20240120132028164"></p>
<p>添加依赖</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240120132128021.png" alt="image-20240120132128021"></p>
<p>创建完项目后删除无关的包</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240120133542924.png" alt="image-20240120133542924"></p>
<p>项目在main&#x2F;java&#x2F;com&#x2F;example目录下自动生成了启动类</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240120133951516.png" alt="image-20240120133951516"></p>
<p>编写请求类（浏览器请求&#x2F;hello页面，就会触发这个方法）</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240120135516970.png" alt="image-20240120135516970"></p>
<p>启动程序<br>运行main方法即可（访问localhost:8080&#x2F;hello或者127.0.0.1:8080&#x2F;hello即可)</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125151520066.png" alt="image-20240125151520066"></p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125151747850.png" alt="image-20240125151747850"></p>
</li>
</ol>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="HTTP-概述"><a href="#HTTP-概述" class="headerlink" title="HTTP-概述"></a>HTTP-概述</h2><ul>
<li><p>概念：Hyper Text Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间传输数据的规则。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125152407065.png" alt="image-20240125152407065"></p>
</li>
<li><p>特点：</p>
<ol>
<li>基于TCP协议：，面向连接。安全。</li>
<li>基于请求-响应模型的：一次请求对应一次响应。</li>
<li>HTTP协议是无状态的协议：对于事务没有记忆能力。，每次请求-相应都是独立的。<ul>
<li>缺点：多次请求间不能共享数据。</li>
<li>优点：速度快。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="HTTP-请求协议（请求数据的格式）"><a href="#HTTP-请求协议（请求数据的格式）" class="headerlink" title="HTTP-请求协议（请求数据的格式）"></a>HTTP-请求协议（请求数据的格式）</h2><p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125153407721.png" alt="image-20240125153407721"></p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125153322567.png" alt="image-20240125153322567"></p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125153911088.png" alt="image-20240125153911088"></p>
<h2 id="HTTP-响应协议"><a href="#HTTP-响应协议" class="headerlink" title="HTTP-响应协议"></a>HTTP-响应协议</h2><p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125154148318.png" alt="image-20240125154148318"></p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125154206959.png" alt="image-20240125154206959"></p>
<h2 id="HTTP-协议解析"><a href="#HTTP-协议解析" class="headerlink" title="HTTP-协议解析"></a>HTTP-协议解析</h2><p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125164522319.png" alt="image-20240125164522319"></p>
<p>服务器自动把要传输的协议解析过程封装，比较著名的有jetty:&#x2F;&#x2F;，weblogic,websphere</p>
<p>其中最著名的当属apache tomcat。</p>
<h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125164749729.png" alt="image-20240125164749729"></p>
<p>启动服务器，就可以打开浏览器，直接访问部署在服务器的页面。</p>
<p>Web服务器</p>
<ul>
<li>对HTP协议操作进行封装。简化web程序开发。</li>
<li>部署web项目，对外提供网上信息浏览服务。</li>
</ul>
<p>Tomcat</p>
<ul>
<li>一个轻量级的Web服务器，支持servlet,jsp等少量javaEE规范。</li>
<li>也被称为web容器，servlet容器。</li>
</ul>
<p>将网页部署到tomcat服务器的具体操作如下所示：</p>
<ol>
<li><p>下载并安装tomcat</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125165029068.png" alt="image-20240125165029068"></p>
</li>
<li><p>将已经写好的前端文件放到对应的tomcat安装目录的webapps目录中</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240125165206796.png" alt="image-20240125165206796"></p>
</li>
<li><p>双击bin\startup.bat，启动tomcat。</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240126145251580.png" alt="image-20240126145251580"></p>
</li>
<li><p>进入浏览器，输入localhost:8080&#x2F;demo&#x2F;index.html</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240126145329204.png" alt="image-20240126145329204"></p>
</li>
</ol>
<h1 id="Web服务器-Tomcat"><a href="#Web服务器-Tomcat" class="headerlink" title="Web服务器-Tomcat"></a>Web服务器-Tomcat</h1><ul>
<li><p>简介</p>
<ul>
<li><p>概念：Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器。支持少量Servlet、JSP少量JavaEE规范。</p>
</li>
<li><p>JavaEE：Java Enterprise Edition，Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范：JDBC，JNDI，EJB（被Spring替代），RMI，JSP，Servlet（被基于Servlet的框架替代），XML，JMS，Java IDL，JTS，JTA，JavaMail，JAF。</p>
</li>
<li><p>Tomcat也被称为Web容器，Servlet容器。Servlet程序需要依赖于Tomcat才能运行。</p>
</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240126143712623.png" alt="image-20240126143712623"></li>
<li><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240126144304052.png" alt="image-20240126144304052"></li>
<li><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240126144410282.png" alt="image-20240126144410282"></li>
</ul>
</li>
<li><p>入门程序解析</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240126144954387.png" alt="image-20240126144954387"></p>
<p>springbootweb在启动时回启动内置的tomcat服务器（以后用的基本是springboot内置的tomcat服务器）</p>
<p><img src="/2024/01/16/javaweb-day01-web%E5%BC%80%E5%8F%91/image-20240126150234575.png" alt="image-20240126150234575"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
  </entry>
  <entry>
    <title>2. github远程部署hexo</title>
    <url>/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/</url>
    <content><![CDATA[<h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://link.zhihu.com/?target=https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>
<p><img src="/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/image-20240115151405964.png" alt="image-20240115151405964"></p>
<h2 id="2-连接github"><a href="#2-连接github" class="headerlink" title="2. 连接github"></a>2. 连接github</h2><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><strong>查看本地已经设置好的用户名和邮箱</strong></p>
<ol>
<li><p>查看全局用户名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br></pre></td></tr></table></figure>

<p>这个命令会显示你设置的全局用户名。</p>
</li>
<li><p>查看全局邮箱：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>创建 SSH 密匙</strong>：</p>
<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>
<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><img src="/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/image-20240115153151771.png" alt="image-20240115153151771"></p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<p><img src="/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/image-20240115153218063.png" alt="image-20240115153218063"></p>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<h2 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3. 创建 Github Pages 仓库"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入 <code>用户名.github.io</code></li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击 Create repository 创建。</p>
<p><img src="/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/image-20240115153305115.png" alt="image-20240115153305115"></p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h2 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4. 本地安装 Hexo 博客程序"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>
<h3 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="4.1 安装 Hexo"></a>4.1 安装 Hexo</h3><p>使用 npm 一键安装 Hexo 博客程序：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>
<p><img src="/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/image-20240115153349039.png" alt="image-20240115153349039"></p>
<h3 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="# 4.2 Hexo 初始化和本地预览"></a><strong># 4.2 Hexo 初始化和本地预览</strong></h3><p><strong>初始化并安装所需组件：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure>

<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>

<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>
<h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5. 部署 Hexo 到 GitHub Pages"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
<h2 id="6-绑定域名（可选）"><a href="#6-绑定域名（可选）" class="headerlink" title="6. 绑定域名（可选）"></a>6. 绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>
<p>我们使用 <a href="https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p>
<h3 id="6-1-域名注册和解析"><a href="#6-1-域名注册和解析" class="headerlink" title="6.1 域名注册和解析"></a>6.1 域名注册和解析</h3><ul>
<li>域名注册和解析教程：<a href="https://zhuanlan.zhihu.com/p/33921436">Namesilo 域名购买及使用教程</a></li>
</ul>
<p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>
<p><img src="/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/image-20240115154525174.png" alt="image-20240115154525174"></p>
<h3 id="6-2-绑定域名到-Hexo-博客"><a href="#6-2-绑定域名到-Hexo-博客" class="headerlink" title="6.2 绑定域名到 Hexo 博客"></a>6.2 绑定域名到 Hexo 博客</h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com,保存名称为/">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>
<p>清除缓存等文件并重新发布网站：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>

<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>
<h3 id="6-3-开启-HTTPS"><a href="#6-3-开启-HTTPS" class="headerlink" title="6.3 开启 HTTPS"></a>6.3 开启 HTTPS</h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>
<p><img src="/2024/01/15/github%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2hexo/image-20240115154742811.png" alt="image-20240115154742811"></p>
<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>
<h2 id="7-至此，完成hexo-github"><a href="#7-至此，完成hexo-github" class="headerlink" title="7.至此，完成hexo + github!"></a>7.至此，完成hexo + github!</h2>]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>hexo中插入图片教程</title>
    <url>/2024/01/15/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-解决方案"><a href="#1-解决方案" class="headerlink" title="1. 解决方案"></a>1. 解决方案</h2><h3 id="1-1-创建图片资源文件夹"><a href="#1-1-创建图片资源文件夹" class="headerlink" title="1.1 创建图片资源文件夹"></a>1.1 创建图片资源文件夹</h3><p>网上有关的解决方式几乎很大一部分会提到这一点：将_config.yml 文件中的post_asset_folder 选项设为 true 来打开。事实上这正是hexo官方文档给出的解决方案之一中的一个步骤。仔细阅读后会发现如下几点：</p>
<ol>
<li><p>该操作的作用就是在使用hexo new xxx指令新建博文时，在相同路径下同步创建一个xxx文件夹，而xxx文件夹的作用就是用来存放图片资源；</p>
</li>
<li><p>就我个人而言，我偏好于直接在source_posts文件夹下新建md文件，而不是通过hexo new xxx指令；</p>
</li>
<li><p>那么直接新建xxx.md再新建xxx文件夹，这种操作的最终效果和使用hexo new xxx指令新建博文的效果一样吗？经过实测，是一样的。</p>
</li>
</ol>
<p>基于以上3点，告诉大家几个结论：</p>
<ol>
<li>新建博文可以不用hexo new xxx指令，我较为推荐直接新建文件和文件夹的方式，只要达到一个md文件，一个同名文件夹的效果即可；</li>
<li>【将_config.yml 文件中的post_asset_folder 选项设为 true 】是必须的！理论上既然没用hexo new xxx指令，文件夹也是我自己新建的，这一步设置的意义似乎并不存在，但是后文介绍的插件必须在post_asset_folder 选项设为 true的情况下才能生效——本人亲测，大家记住这么设置即可！</li>
</ol>
<h3 id="1-2-typora中图像设置"><a href="#1-2-typora中图像设置" class="headerlink" title="1.2 typora中图像设置"></a>1.2 typora中图像设置</h3><p>一般来说，大家会现在typora里写好md格式的博客，然后通过hexo clean、hexo g、hexo s进行一下本地测试，确认无误后再发布到远端。</p>
<p>暂且不说hexo博客的图片插入是个问题，我相信当初单纯利用typora做笔记时，图片文件的管理就让很多人头疼过，typora官方似乎也意识到这个问题，所以偏好设置中图像是专门的一项，提供了很多选择。</p>
<p><img src="/2024/01/15/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B/image-20240115143136972.png" alt="image-20240115143136972"></p>
<p>我相信大多数同学写md时的图片很多可能是直接截图或者在其他地方copy的，然后在typora中直接粘贴就ok了。但是这么做之前最好把typora插入图片时采取何种操作配置好，否则md文件和图片相隔十万八千里，后续一旦移动md文件图片就识别不出来，相信大家用过typora都深有体会。</p>
<p>所以接下来讲一下typora如何设置。直接给结论：</p>
<p><img src="/2024/01/15/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B/image-20240115143150050.png" alt="image-20240115143150050"></p>
<p>的路径是：<code>./$&#123;filename&#125;</code>。<code>./</code>表示当前文件夹，<code>$&#123;filename&#125;</code>表示当前文件名。这么设置的好处：</p>
<ol>
<li>图片资源文件夹有了；</li>
<li>而且是同名文件夹！（2.1中的文件夹其实不用手动添加了）</li>
</ol>
<p>这么设置的结果就是：想写篇博客，在<code>source\_posts</code>文件夹下新建<code>xxx.md</code>文件，写着写着需要插一张图，从别处复制，然后在typora中直接粘贴，<code>bling!</code>图片资源文件夹自动搞定，并不用关心什么文件夹，只管专注于<code>md</code>文件即可。</p>
<h3 id="1-3-插件下载"><a href="#1-3-插件下载" class="headerlink" title="1.3 插件下载"></a>1.3 插件下载</h3><p>这个很多博客也有提到，插件的名字叫<code>hexo-asset-image</code>，相信在网上找了一波解决方案的同学一定对这个名字不陌生。</p>
<p>这个插件的不同版本可能会有不同的影响，我最终成功解决问题的版本是用如下命令下载的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>为什么需要这么插件呢？</p>
<p>因为我们虽然在<code>source\_posts</code>文件夹下写了md文件，也有了图片资源文件夹存了图片，但从我们前面typora中的设置不难知道，实际上md文件中的图片路径都是相对路径（<code>./$&#123;filename&#125;</code>）。而实际网上看到的博文显然不是md文件，而是html文件，从md到html的转变就是hexo帮我们做的，还记得<code>hexo g</code>命令吗？就是干这个的。转换后的html文件在<code>public</code>目录下，路径是通过日期指示的。</p>
<p>下面第一张图是存放md文件的地方，图片就在图中的jiangzhou文件夹中；第二张图是generate之后存在html和图片资源的地方。</p>
<p><img src="/2024/01/15/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B/image-20240115145940757.png" alt="image-20240115145940757"></p>
<p><img src="/2024/01/15/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%99%E7%A8%8B/image-20240115145902744.png" alt="image-20240115145902744"></p>
<h2 id="1-4-完成部署"><a href="#1-4-完成部署" class="headerlink" title="1.4 完成部署"></a>1.4 完成部署</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>经过以上三步，在本地目录public目录下就会根据日期产生对应的网页，网页中图片的路径经过插件<code>https://github.com/CodeFalling/hexo-asset-image</code>之后已经正确转换为对应的路径。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
  </entry>
  <entry>
    <title>junit-reflex-proxy</title>
    <url>/2023/11/17/junit-reflex-proxy/</url>
    <content><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="概述、Junit框架快速入门"><a href="#概述、Junit框架快速入门" class="headerlink" title="概述、Junit框架快速入门"></a>概述、Junit框架快速入门</h2><ul>
<li><p>针对最小的功能单元（方法），编写测试代码进行正确性测试</p>
</li>
<li><p><strong>具体步骤</strong></p>
<ol>
<li><p>将junit框架的jar包导入到项目中（注意：IDEA已经集成了Junit框架，不需要我们自己手动导入了）</p>
</li>
<li><p>为需要测试的业务类，定义对应的测试类，并为每个业务方法，编写对应的测试方法（<strong>必须：公共、无参、无返回值</strong>）</p>
</li>
<li><p>测试方法上必须声明@Test注解，然后在测试方法中，编写代码调用被测试的业务方法进行测试；</p>
</li>
<li><p>开始测试：选中测试方法，右键选择“JUnit”运行，如果测试通过则是绿色；如果测试失败，则是红色</p>
<p><strong>1. 编写业务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.d1_junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNumber</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字长度是&quot;</span> + name.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMaxIndex</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 编写测试类（测试类和业务类方法一一对应）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.d1_junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrintNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        StringUtil.printNumber(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        StringUtil.printNumber(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetMaxIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(StringUtil.getMaxIndex(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        System.out.println(StringUtil.getMaxIndex(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 断言机制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.d1_junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrintNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        StringUtil.printNumber(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        StringUtil.printNumber(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetMaxIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(StringUtil.getMaxIndex(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        System.out.println(StringUtil.getMaxIndex(<span class="literal">null</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> StringUtil.getMaxIndex(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//断言机制：程序员可以通过预测业务方法的结果</span></span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;方法内部有bug!&quot;</span>,<span class="number">4</span>,index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Junit框架的常见注解"><a href="#Junit框架的常见注解" class="headerlink" title="Junit框架的常见注解"></a>Junit框架的常见注解</h2></li>
</ul>
<p><strong>Junit单元测试框架的常用注解（Junit 4.xxxx版本）</strong></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Test</td>
<td>测试类中的方法必须用它修饰才能成为测试方法，才能启动执行。</td>
</tr>
<tr>
<td>@Before</td>
<td>用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次。</td>
</tr>
<tr>
<td>@After</td>
<td>用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次。</td>
</tr>
<tr>
<td>@BeforeClass</td>
<td>用来修饰一个静态方法，该方法会在所有测试方法之前执行一次。</td>
</tr>
<tr>
<td>@AfterClass</td>
<td>用来修饰一个静态方法，该方法会在所有测试方法之后执行一次。</td>
</tr>
</tbody></table>
<ul>
<li>在测试方法执行前执行的方法，常用于：初始化资源。</li>
<li>在测试方法执行完之后再执行的方法，常用于：释放资源。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.d1_junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilTest</span> &#123;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt; test1 Before执行了--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt;test2 After执行了--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt;Before CLass执行了---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt;After Class执行了---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrintNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        StringUtil.printNumber(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        StringUtil.printNumber(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetMaxIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(StringUtil.getMaxIndex(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        System.out.println(StringUtil.getMaxIndex(<span class="literal">null</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> StringUtil.getMaxIndex(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//断言机制：程序员可以通过预测业务方法的结果</span></span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;方法内部有bug!&quot;</span>, <span class="number">5</span>, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果如下所示：</span><br><span class="line">----&gt;Before CLass执行了---------</span><br><span class="line">----&gt; test1 Before执行了--------</span><br><span class="line">名字长度是<span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">----&gt;test2 After执行了--------</span><br><span class="line">----&gt; test1 Before执行了--------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line">----&gt;test2 After执行了--------</span><br><span class="line">----&gt;After Class执行了---------</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="认识反射、获取类"><a href="#认识反射、获取类" class="headerlink" title="认识反射、获取类"></a>认识反射、获取类</h2><ul>
<li>概念&#x2F;是什么：加载类，并允许以编程的方式解剖类中的各种成分（成员变量、方法、构造器等）。</li>
</ul>
<p>​		类是由成员变量、构造器、成员方法组成的。<strong>我们学习反射，就是学习获取类的信息，操作它们。</strong></p>
<h2 id="获取类的构造器"><a href="#获取类的构造器" class="headerlink" title="获取类的构造器"></a>获取类的构造器</h2><p><strong>1、 反射第一步：加载类，获取类的字节码：Class对象（万物皆对象，类的字节码在Java中还是Class对象）</strong></p>
<p>Student.java——&gt;Student.class——&gt;字节码文件——&gt;内存</p>
<p>获取Class对象的三种方式</p>
<ul>
<li>Class c1 &#x3D; 类名.class</li>
<li>调用Class提供方法：public static Class forName(String package);</li>
<li>Object提供的方法：public Class getClass(); Class c3 &#x3D; 对象.getClass();</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.d2_reliect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//第一种方式</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">// 全类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());  <span class="comment">//简名：Student</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方式</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.d2_reliect.Student&quot;</span>);</span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第三种方式</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">        System.out.println(c3 == c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、获取类的构造器：Constructor对象</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>获取全部构造器（只能获取public修饰的）</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td>获取全部构造器（只要存在就能拿到）</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>获取某个构造器（只能获取public修饰的）</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>获取某个构造器（只要存在就能拿到）</td>
</tr>
</tbody></table>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetConstructor2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1、反射第一步：必须先得到这个类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取某个构造器，无参数构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(constructor.getName() + <span class="string">&quot;===&gt;&quot;</span> + constructor.getParameterCount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.1 通过无参构造器初始化实例</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) constructor.newInstance();</span><br><span class="line">        System.out.println(cat);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、获取某个构造器，有参数构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor1.getName() + <span class="string">&quot;===&gt;&quot;</span> + constructor1.getParameterCount());</span><br><span class="line">        <span class="comment">// 3.1 通过有参构造器初始化实例</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> (Cat) constructor1.newInstance(<span class="string">&quot;阿松大&quot;</span>,<span class="number">33</span>);</span><br><span class="line">        System.out.println(cat2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.1、获取类构造器的作用：初始化类对象</strong></p>
<table>
<thead>
<tr>
<th>Constructor提供的方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object … initargs)</td>
<td>调用此构造器对象表示的构造器，并传入参数，完成对象的初始化并返回</td>
</tr>
<tr>
<td>public void setAccessible(boolean flag)</td>
<td>设置为true，表示禁止检查访问控制（暴力反射）</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、获取类的class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> c.getDeclaredConstructor();</span><br><span class="line">System.out.println(constructor1.getName() + <span class="string">&quot;---&gt;&quot;</span> + constructor1.getParameterCount());</span><br><span class="line"><span class="comment">//设置访问权限禁止检查</span></span><br><span class="line">constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 直接用会报错，因为Cat类的无参构造函数是private的，默认是无法访问的</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) constructor1.newInstance();</span><br><span class="line">System.out.println(cat);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取有参数构造器</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">System.out.println(constructor2.getName() + <span class="string">&quot;---&gt;&quot;</span> + constructor2.getParameterCount());</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> (Cat) constructor2.newInstance(<span class="string">&quot;叮当猫&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(cat2);</span><br></pre></td></tr></table></figure>

<p><strong>3、获取类的成员变量：Field对象</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Field[] getFields()</td>
<td>获取类的全部成员变量（只能获取public修饰的）</td>
</tr>
<tr>
<td>public Field[] getDeclaredFields()</td>
<td>获取类的全部成员变量（只能存在就能拿到）</td>
</tr>
<tr>
<td>public Field[] getField(String name)</td>
<td>获取类的某个成员变量（只能获取public修饰的）</td>
</tr>
<tr>
<td>public Field[] getDeclaredField(String name)</td>
<td>获取类的某个成员变量（只能存在就能拿到）</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、获取类的class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line"><span class="comment">// 2、获取类的全部成员变量</span></span><br><span class="line">Field[] declaredFields = c.getDeclaredFields();</span><br><span class="line"><span class="comment">// 3、遍历这个成员变量数组</span></span><br><span class="line"><span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">    System.out.println(declaredField);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4、定位某个成员变量</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">fName</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(fName.getName() + <span class="string">&quot;---&gt;&quot;</span> + fName.getType());</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">fAge</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">System.out.println(fAge.getName() + <span class="string">&quot;---&gt;&quot;</span> + fAge.getType());</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void set(Object obj, Object value)</td>
<td>赋值</td>
</tr>
<tr>
<td>Object get(Object obj)</td>
<td>取值</td>
</tr>
<tr>
<td>public void setAccessible(boolean flag)</td>
<td>设置为true，表示禁止检查访问控制（暴力反射）</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="comment">//定位某个成员变量</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">fName</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(fName.getName() + <span class="string">&quot;---&gt;&quot;</span> + fName.getType());</span><br><span class="line"><span class="comment">//暴力反射</span></span><br><span class="line">fName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">fName.set(cat,<span class="string">&quot;加菲猫&quot;</span>);</span><br><span class="line">System.out.println(cat);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)fName.get(cat);</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure>

<p><strong>4、获取类的成员方法：Method对象</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethods()</td>
<td>获取类的全部成员方法（只能获取public修饰的）</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td>获取类的全部成员方法（只要存在就能拿到）</td>
</tr>
<tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>获取类的某个成员方法（只能获取public修饰的）</td>
</tr>
<tr>
<td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>获取类的某个成员方法（只要存在就能拿到）</td>
</tr>
</tbody></table>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1、反射第一步，先得到类的CLass对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取类的全部成员方法</span></span><br><span class="line">Method[] declaredMethods = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、遍历数组中的每个方法对象</span></span><br><span class="line"><span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">    System.out.println(declaredMethod.getName() + <span class="string">&quot;---&gt;&quot;</span></span><br><span class="line">                       + declaredMethod.getParameterCount() + <span class="string">&quot;---&gt;&quot;</span></span><br><span class="line">                       + declaredMethod.getReturnType());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、获取某个方法对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">System.out.println(eat.getName() + <span class="string">&quot;---&gt;&quot;</span> + eat.getParameterCount() + <span class="string">&quot;---&gt;&quot;</span> + eat.getReturnType());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、获取某个方法对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">eat2</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">System.out.println(eat2.getName() + <span class="string">&quot;---&gt;&quot;</span> + eat2.getParameterCount() + <span class="string">&quot;---&gt;&quot;</span> + eat2.getReturnType());</span><br></pre></td></tr></table></figure>

<p><strong>4.2、执行类的成员方法</strong></p>
<table>
<thead>
<tr>
<th>Method提供的方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Object invoke(Object obj, Object… args)</td>
<td>触发某个对象的该方法执行</td>
</tr>
<tr>
<td>public void setAccessible(boolean flag)</td>
<td>设置为true，表示禁止检查访问控制（暴力反射）</td>
</tr>
</tbody></table>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、反射第一步，先得到类的CLass对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取某个方法对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">System.out.println(eat.getName() + <span class="string">&quot;---&gt;&quot;</span> + eat.getParameterCount() + <span class="string">&quot;---&gt;&quot;</span> + eat.getReturnType());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、获取某个方法对象</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">eat2</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">System.out.println(eat2.getName() + <span class="string">&quot;---&gt;&quot;</span> + eat2.getParameterCount() + <span class="string">&quot;---&gt;&quot;</span> + eat2.getReturnType());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、出发run方法执行</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">eat2.setAccessible(<span class="literal">true</span>);  <span class="comment">// 禁止检查访问权限</span></span><br><span class="line"><span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> eat2.invoke(cat, <span class="string">&quot;shit&quot;</span>); <span class="comment">// 调用无参数的run方法，用cat对象触发调用的。</span></span><br><span class="line">System.out.println(rs);</span><br></pre></td></tr></table></figure>

<p><strong>5、反射的作用和应用场景</strong></p>
<p>反射的作用</p>
<ul>
<li><p>基本作用：可以得到一个类的全部成分然后操作。</p>
</li>
<li><p>可以破坏封装性。</p>
</li>
<li><p>最重要的用途是：适合做Java的框架，基本上，主流的框架都会基于反射设计出一些通用的功能。</p>
</li>
</ul>
<p>应用场景</p>
<p>需求： 对任意一个对象，该框架都可以把对象的字段名和对应的值，保存到文件中去。</p>
<p>实现步骤：</p>
<ol>
<li>定义一个方法，可以接受任意对象</li>
<li>每收到一个对象后，使用反射获取该对象的Class对象，然后获取全部的成员变量。</li>
<li>遍历成员变量，然后提取成员变量在该对象中的具体值。</li>
<li>把成员变量名，和其值，写到文件中即可。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectFrame</span> &#123;</span><br><span class="line">    <span class="comment">// 目标：保存任意对象的字段及其数据到文件中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException, FileNotFoundException &#123;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\data.txt&quot;</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、obj是任意对象，到底有多少个字段要保存。</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cName</span> <span class="operator">=</span> c.getSimpleName();</span><br><span class="line">        ps.println(<span class="string">&quot;------------------------------------&quot;</span> + cName + <span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、从类中提取它的全部成员变量。</span></span><br><span class="line">        Field[] fields = c.getDeclaredFields();</span><br><span class="line">        <span class="comment">// 3、遍历每个成员变量</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="comment">// 4、拿到成员变量的名字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> field.getName();</span><br><span class="line">            <span class="comment">// 5、拿到这个成员变量在对象中的数据</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>); <span class="comment">// 禁止检查访问控制</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> field.get(obj) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            ps.println(name + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="注解（Annotation）"><a href="#注解（Annotation）" class="headerlink" title="注解（Annotation）"></a>注解（Annotation）</h1><h2 id="概述、自定义注解"><a href="#概述、自定义注解" class="headerlink" title="概述、自定义注解"></a>概述、自定义注解</h2><ul>
<li><p>就是Java代码中的特殊标记，比如：@Override，@Test等，作用是：让其他程序根据注解信息来决定怎么执行程序。</p>
</li>
<li><p>注意：注解可以用在类上、构造器上、方法上、成员变量上、参数上、等位置处。</p>
</li>
<li><p>自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    <span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特殊属性名：value</p>
<ul>
<li>如果注解中只有一个value属性，使用注释时，value名称可以不写！！</li>
</ul>
<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*AnnotationTest1.java*/</span></span><br><span class="line"><span class="meta">@MyTest1(aaa = &quot;牛魔王&quot;, ccc = &#123;&quot;html&quot;,&quot;java&quot;&#125;)</span></span><br><span class="line"><span class="comment">//@MyTest2(value=&quot;孙悟空&quot;)</span></span><br><span class="line"><span class="meta">@MyTest2(&quot;孙悟空&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest1</span> &#123;</span><br><span class="line">    <span class="meta">@MyTest1(aaa = &quot;铁扇公主&quot;, bbb = false, ccc = &#123;&quot;python&quot;,&quot;前端&quot;,&quot;java&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Mytest1.java*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d3_annotation;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest1 &#123;</span><br><span class="line">    String <span class="title function_">aaa</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">bbb</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">    String[] ccc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Mytest2.java*/</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d3_annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest2 &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>; <span class="comment">//特殊属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注解的原理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest1 &#123;</span><br><span class="line">    String <span class="title function_">aaa</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">bbb</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">    String[] ccc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行main函数得到编译文件，使用xjad反编译文件，得到结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyTest1</span> extend Annotation&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">aaa</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">bbb</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String[] ccc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注解本质上是一个接口，Java中所有注解都是继承Annotation接口的。</li>
<li>@注解(…)：其实就是一个实现类对象，实现了该注解以及Annotation接口。</li>
</ul>
</li>
</ul>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ul>
<li><p>指的是：修饰注解的注解。</p>
</li>
<li><p><strong>元注解一</strong></p>
<p>作用：声明被修饰的注解只能在哪些位置使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="number">1.</span> TYPE，类，接口</span><br><span class="line"><span class="number">2.</span> FIELD，成员变量</span><br><span class="line"><span class="number">3.</span> METHOD, 成员方法</span><br><span class="line"><span class="number">4.</span> PARAMETER, 方法参数</span><br><span class="line"><span class="number">5.</span> CONSTRUCTOR, 构造器</span><br><span class="line"><span class="number">6.</span> LOCAL_VARIABLE, 局部变量</span><br></pre></td></tr></table></figure>




<table>
<thead>
<tr>
<th>类型</th>
<th>作用范围</th>
</tr>
</thead>
<tbody><tr>
<td>TYPE</td>
<td>类，接口</td>
</tr>
<tr>
<td>FIELD</td>
<td>成员变量</td>
</tr>
<tr>
<td>METHOD</td>
<td>成员方法</td>
</tr>
<tr>
<td>PARAMETER</td>
<td>方法参数</td>
</tr>
<tr>
<td>CONSTRUCTOR</td>
<td>构造器</td>
</tr>
<tr>
<td>LOCAL_VARIABLE</td>
<td>局部变量</td>
</tr>
</tbody></table>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest3 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>元注解二</strong></p>
<p>作用：声明注解的保留周期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy,RUNTIME)</span></span><br><span class="line"><span class="number">1.</span> SOURCE</span><br><span class="line">    只作用在源码阶段，字节码文件中不存在</span><br><span class="line"><span class="number">2.</span> CLASS（默认值）</span><br><span class="line">    保留到字节码文件姐阶段，运行阶段不存在</span><br><span class="line"><span class="number">3.</span> RUNTIME（开发常用）</span><br><span class="line">    一直保存到运行阶段</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="注解的解析"><a href="#注解的解析" class="headerlink" title="注解的解析"></a>注解的解析</h2><ul>
<li><p>就是判断类上面，方法上，成员变量上是否存在注解，并把注解里的内容解析出来</p>
</li>
<li><p>如何解析注解？</p>
<ul>
<li><p>指导思想：要解析谁上面的注解，就应该先拿到谁。</p>
</li>
<li><p>比如要解析类上面的注解，则应该先获取该类的对象，再通过Class对象解析其上面的注解。</p>
</li>
<li><p>比如要解析成员方法上面的注解，则应该先获取该成员方法的Method对象，再通过Method对象解析其上面的注解。</p>
</li>
<li><p>Class、Method、Field、Constructor都实现了AnnotatedElement接口，它们都拥有解析注解的能力。</p>
<table>
<thead>
<tr>
<th>AnnotatedElement接口提供了解析注解的方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Annotation[] getDeclaredAnnotations()</td>
<td>获取当前对象上面的注解</td>
</tr>
<tr>
<td>public T getDeclaredAnnotation(Class&lt;\T&gt; annotationClass)</td>
<td>获取指定的注解对象</td>
</tr>
<tr>
<td>public boolean isAnnotationPresent(Class&lt;Annotation&gt; annotationClass)</td>
<td>判断当前对象上是否存在某个注解</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>解析注解的案例</p>
<p>定义注解MyTest4,要求如下所示</p>
<ol>
<li>包含属性：String value()</li>
<li>包含属性：double aaa()，默认值是100</li>
<li>包含属性：String[] bbb()</li>
<li>限制注解使用的位置：类和成员方法上</li>
<li>限制注解的有效范围：一直到运行时</li>
</ol>
<p>定义一个类：Demo，在类中定义一个test1方法，并在该类和其方法上使用MyTest4注解</p>
<p>定义一个AnnotationTest3测试类，解析Demo类中的全部注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -------------------MyTest4.java-----------------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d3_annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest4 &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">aaa</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">100</span>;</span><br><span class="line">    String[] bbb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------Demo.java-------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d3_annotation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTest4(value = &quot;蜘蛛精&quot;, aaa = 99.5, bbb = &#123;&quot;至尊宝&quot;, &quot;黑马&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="meta">@MyTest4(value = &quot;至尊宝&quot;, aaa = 199.5, bbb = &#123;&quot;紫霞&quot;, &quot;牛夫人&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------AnnotationTest3.java-----------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d3_annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest3</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseClass</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">// 1、先得到Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Demo.class;</span><br><span class="line">        <span class="comment">// 2、解析类上的注解</span></span><br><span class="line">        <span class="comment">// 判断类上是否包含了某个注解</span></span><br><span class="line">        <span class="keyword">if</span>(c.isAnnotationPresent(MyTest4.class)) &#123;</span><br><span class="line">            <span class="type">MyTest4</span> <span class="variable">myTest4</span> <span class="operator">=</span> (MyTest4) c.getDeclaredAnnotation(MyTest4.class);</span><br><span class="line">            System.out.println(myTest4.value());</span><br><span class="line">            System.out.println(myTest4.aaa());</span><br><span class="line">            System.out.println(Arrays.toString(myTest4.bbb()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseMethod</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">// 1、先得到Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Demo.class;</span><br><span class="line">        <span class="comment">// 2、获取方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="comment">// 3、判断方法对象上是否包含了某个注释</span></span><br><span class="line">        <span class="keyword">if</span>(m.isAnnotationPresent(MyTest4.class))&#123;</span><br><span class="line">            <span class="type">MyTest4</span> <span class="variable">myTest4</span> <span class="operator">=</span> (MyTest4) m.getDeclaredAnnotation(MyTest4.class);</span><br><span class="line">            System.out.println(myTest4.value());</span><br><span class="line">            System.out.println(myTest4.aaa());</span><br><span class="line">            System.out.println(Arrays.toString(myTest4.bbb()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><p>模拟Junit框架</p>
<p><strong>需求</strong>：定义若干个方法，只要加了MyTest注解，就会触发该方法的执行。</p>
<p><strong>分析</strong></p>
<ol>
<li>定义一个自定义注解MyTest，只能注解方法，存活范围是一直都在。</li>
<li>定义若干个方法，部分方法加上@MyTest修饰，部分方法不加。</li>
<li>模拟一个Junit程序，可以触发加了@MyTest注解的方法执行。</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ---------------AnnotationTest4.java----------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d3_annotation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest4</span> &#123;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----test1----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----test2----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----test3----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----test4----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">AnnotationTest4</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationTest4</span>();</span><br><span class="line">        <span class="comment">//启动程序！</span></span><br><span class="line">        <span class="comment">// 1、得到class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> AnnotationTest4.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、提取这个类的全部成员方法</span></span><br><span class="line">        Method[] methods = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//3、遍历这个数组中的每个方法，看方法是否被@MyTest注释</span></span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(MyTest.class))&#123;</span><br><span class="line">                <span class="comment">//说明当前方法是存在@MyTest，触发方法执行</span></span><br><span class="line">                method.invoke(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------MyTest4.java----------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d3_annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest4 &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">aaa</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">100</span>;</span><br><span class="line">    String[] bbb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><ul>
<li><p>概述、快速入门</p>
<p>对象如果嫌身上干的事情太多的话，可以通过代理转移部分职责。</p>
<p>对象有什么方法想被代理，代理就一定要有对应的方法。</p>
</li>
<li><p>应用案例、使用代理的好处</p>
<p>转移对象的方法，优化类的逻辑结构</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----------------------UserService.java------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d5_proxy2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用户业务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 登录功能</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName,String passWord)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 查询用户，返回数组的形式。</span></span><br><span class="line">    String[] selectUsers() <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------UserServceImpl.java-----------------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d5_proxy2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户业务实现类（面向接口编程）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName, String passWord)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(passWord))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您登录成功，欢迎光临本系统~&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您登录失败，用户名或密码错误~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功删除了1万个用户~&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectUsers() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;查询出了3个用户&quot;</span>);</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;张全蛋&quot;</span>, <span class="string">&quot;李二狗&quot;</span>, <span class="string">&quot;牛爱花&quot;</span>&#125;;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------ProxyUtil.java------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d5_proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line"><span class="comment">//    public static UserService createProxy(UserService userService)&#123;</span></span><br><span class="line"><span class="comment">//        UserService userServiceProxy = (UserService) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),</span></span><br><span class="line"><span class="comment">//                new Class[]&#123;UserService.class&#125;, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                        if(method.getName().equals(&quot;login&quot;) || method.getName().equals(&quot;deleteUsers&quot;)||</span></span><br><span class="line"><span class="comment">//                               method.getName().equals(&quot;selectUsers&quot;))&#123;</span></span><br><span class="line"><span class="comment">//                            long startTime = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            Object rs = method.invoke(userService, args);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            long endTime = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">//                            System.out.println(method.getName() + &quot;方法执行耗时：&quot; + (endTime - startTime)/ 1000.0 + &quot;s&quot;);</span></span><br><span class="line"><span class="comment">//                            return rs;</span></span><br><span class="line"><span class="comment">//                        &#125;else &#123;</span></span><br><span class="line"><span class="comment">//                            Object rs = method.invoke(userService, args);</span></span><br><span class="line"><span class="comment">//                            return rs;</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line"><span class="comment">//        return userServiceProxy;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title function_">createProxy</span><span class="params">(UserService userService)</span>&#123;</span><br><span class="line">        <span class="comment">//1、使用Proxy类调用静态方法newProxyInstance创建代理，代理要强转为UserService类型</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userServiceProxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;UserService.class&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;login&quot;</span>) || method.getName().equals(<span class="string">&quot;deleteUsers&quot;</span>) || method.getName().equals(<span class="string">&quot;selectUsers&quot;</span>))&#123;</span><br><span class="line">                        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">rs</span> <span class="operator">=</span> method.invoke(userService, args);</span><br><span class="line">                        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                        System.out.println(method.getName() + <span class="string">&quot;方法执行耗时：&quot;</span> + (endTime - startTime) / <span class="number">1000.0</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> rs;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">rs</span> <span class="operator">=</span> method.invoke(userService, args);</span><br><span class="line">                        <span class="keyword">return</span> rs;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userServiceProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------Test.java----------------------------</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.d5_proxy2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标：使用动态代理解决实际问题，并掌握使用代理的好处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 1、创建用户业务对象。</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ProxyUtil.createProxy(<span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、调用用户业务的功能。</span></span><br><span class="line">        userService.login(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.deleteUsers();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] names = userService.selectUsers();</span><br><span class="line">        System.out.println(<span class="string">&quot;查询到的用户是：&quot;</span> + Arrays.toString(names));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>javase</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
